/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::const_static_lifetime)]
#![allow(clippy::unreadable_literal)]
#![allow(clippy::cyclomatic_complexity)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
  #[inline]
  pub fn new() -> Self {
    __IncompleteArrayField(::std::marker::PhantomData, [])
  }
  #[inline]
  pub unsafe fn as_ptr(&self) -> *const T {
    ::std::mem::transmute(self)
  }
  #[inline]
  pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
    ::std::mem::transmute(self)
  }
  #[inline]
  pub unsafe fn as_slice(&self, len: usize) -> &[T] {
    ::std::slice::from_raw_parts(self.as_ptr(), len)
  }
  #[inline]
  pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
    ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
  }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
  fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
    fmt.write_str("__IncompleteArrayField")
  }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
  #[inline]
  fn clone(&self) -> Self {
    Self::new()
  }
}
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub const LIBNL_STRING: &'static [u8; 12usize] = b"libnl 3.4.0\0";
pub const LIBNL_VERSION: &'static [u8; 6usize] = b"3.4.0\0";
pub const LIBNL_VER_MAJ: u32 = 3;
pub const LIBNL_VER_MIN: u32 = 4;
pub const LIBNL_VER_MIC: u32 = 0;
pub const LIBNL_CURRENT: u32 = 226;
pub const LIBNL_REVISION: u32 = 0;
pub const LIBNL_AGE: u32 = 26;
pub const NLE_SUCCESS: u32 = 0;
pub const NLE_FAILURE: u32 = 1;
pub const NLE_INTR: u32 = 2;
pub const NLE_BAD_SOCK: u32 = 3;
pub const NLE_AGAIN: u32 = 4;
pub const NLE_NOMEM: u32 = 5;
pub const NLE_EXIST: u32 = 6;
pub const NLE_INVAL: u32 = 7;
pub const NLE_RANGE: u32 = 8;
pub const NLE_MSGSIZE: u32 = 9;
pub const NLE_OPNOTSUPP: u32 = 10;
pub const NLE_AF_NOSUPPORT: u32 = 11;
pub const NLE_OBJ_NOTFOUND: u32 = 12;
pub const NLE_NOATTR: u32 = 13;
pub const NLE_MISSING_ATTR: u32 = 14;
pub const NLE_AF_MISMATCH: u32 = 15;
pub const NLE_SEQ_MISMATCH: u32 = 16;
pub const NLE_MSG_OVERFLOW: u32 = 17;
pub const NLE_MSG_TRUNC: u32 = 18;
pub const NLE_NOADDR: u32 = 19;
pub const NLE_SRCRT_NOSUPPORT: u32 = 20;
pub const NLE_MSG_TOOSHORT: u32 = 21;
pub const NLE_MSGTYPE_NOSUPPORT: u32 = 22;
pub const NLE_OBJ_MISMATCH: u32 = 23;
pub const NLE_NOCACHE: u32 = 24;
pub const NLE_BUSY: u32 = 25;
pub const NLE_PROTO_MISMATCH: u32 = 26;
pub const NLE_NOACCESS: u32 = 27;
pub const NLE_PERM: u32 = 28;
pub const NLE_PKTLOC_FILE: u32 = 29;
pub const NLE_PARSE_ERR: u32 = 30;
pub const NLE_NODEV: u32 = 31;
pub const NLE_IMMUTABLE: u32 = 32;
pub const NLE_DUMP_INTR: u32 = 33;
pub const NLE_ATTRSIZE: u32 = 34;
pub const NLE_MAX: u32 = 34;
pub const NL_PROB_MIN: u32 = 0;
pub const NL_PROB_MAX: u32 = 4294967295;
pub const NL_DONTPAD: u32 = 0;
pub const NL_AUTO_PORT: u32 = 0;
pub const NL_AUTO_PID: u32 = 0;
pub const NL_AUTO_SEQ: u32 = 0;
pub const NL_CACHE_AF_ITER: u32 = 1;
pub const NL_AUTO_PROVIDE: u32 = 1;
pub const NL_ALLOCATED_SOCK: u32 = 2;
pub const NL80211_GENL_NAME: &'static [u8; 8usize] = b"nl80211\0";
pub const NL80211_MULTICAST_GROUP_CONFIG: &'static [u8; 7usize] = b"config\0";
pub const NL80211_MULTICAST_GROUP_SCAN: &'static [u8; 5usize] = b"scan\0";
pub const NL80211_MULTICAST_GROUP_REG: &'static [u8; 11usize] = b"regulatory\0";
pub const NL80211_MULTICAST_GROUP_MLME: &'static [u8; 5usize] = b"mlme\0";
pub const NL80211_MULTICAST_GROUP_VENDOR: &'static [u8; 7usize] = b"vendor\0";
pub const NL80211_MULTICAST_GROUP_NAN: &'static [u8; 4usize] = b"nan\0";
pub const NL80211_MULTICAST_GROUP_TESTMODE: &'static [u8; 9usize] = b"testmode\0";
pub const NL80211_WIPHY_NAME_MAXLEN: u32 = 64;
pub const NL80211_MAX_SUPP_RATES: u32 = 32;
pub const NL80211_MAX_SUPP_HT_RATES: u32 = 77;
pub const NL80211_MAX_SUPP_REG_RULES: u32 = 64;
pub const NL80211_TKIP_DATA_OFFSET_ENCR_KEY: u32 = 0;
pub const NL80211_TKIP_DATA_OFFSET_TX_MIC_KEY: u32 = 16;
pub const NL80211_TKIP_DATA_OFFSET_RX_MIC_KEY: u32 = 24;
pub const NL80211_HT_CAPABILITY_LEN: u32 = 26;
pub const NL80211_VHT_CAPABILITY_LEN: u32 = 12;
pub const NL80211_MAX_NR_CIPHER_SUITES: u32 = 5;
pub const NL80211_MAX_NR_AKM_SUITES: u32 = 2;
pub const NL80211_MIN_REMAIN_ON_CHANNEL_TIME: u32 = 10;
pub const NL80211_SCAN_RSSI_THOLD_OFF: i32 = -300;
pub const NL80211_CQM_TXE_MAX_INTVL: u32 = 1800;
pub const NL80211_VHT_NSS_MAX: u32 = 8;
pub const NL80211_KCK_LEN: u32 = 16;
pub const NL80211_KEK_LEN: u32 = 16;
pub const NL80211_REPLAY_CTR_LEN: u32 = 8;
pub const NL80211_CRIT_PROTO_MAX_DURATION: u32 = 5000;
pub const NL80211_VENDOR_ID_IS_LINUX: u32 = 2147483648;
pub const NL80211_NAN_FUNC_SERVICE_ID_LEN: u32 = 6;
pub const NL80211_NAN_FUNC_SERVICE_SPEC_INFO_MAX_LEN: u32 = 255;
pub const NL80211_NAN_FUNC_SRF_MAX_LEN: u32 = 255;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
  _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
  pub _flags: ::std::os::raw::c_int,
  pub _IO_read_ptr: *mut ::std::os::raw::c_char,
  pub _IO_read_end: *mut ::std::os::raw::c_char,
  pub _IO_read_base: *mut ::std::os::raw::c_char,
  pub _IO_write_base: *mut ::std::os::raw::c_char,
  pub _IO_write_ptr: *mut ::std::os::raw::c_char,
  pub _IO_write_end: *mut ::std::os::raw::c_char,
  pub _IO_buf_base: *mut ::std::os::raw::c_char,
  pub _IO_buf_end: *mut ::std::os::raw::c_char,
  pub _IO_save_base: *mut ::std::os::raw::c_char,
  pub _IO_backup_base: *mut ::std::os::raw::c_char,
  pub _IO_save_end: *mut ::std::os::raw::c_char,
  pub _markers: *mut _IO_marker,
  pub _chain: *mut _IO_FILE,
  pub _fileno: ::std::os::raw::c_int,
  pub _flags2: ::std::os::raw::c_int,
  pub _old_offset: __off_t,
  pub _cur_column: ::std::os::raw::c_ushort,
  pub _vtable_offset: ::std::os::raw::c_schar,
  pub _shortbuf: [::std::os::raw::c_char; 1usize],
  pub _lock: *mut _IO_lock_t,
  pub _offset: __off64_t,
  pub _codecvt: *mut _IO_codecvt,
  pub _wide_data: *mut _IO_wide_data,
  pub _freeres_list: *mut _IO_FILE,
  pub _freeres_buf: *mut ::std::os::raw::c_void,
  pub __pad5: usize,
  pub _mode: ::std::os::raw::c_int,
  pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
  assert_eq!(
    ::std::mem::size_of::<_IO_FILE>(),
    216usize,
    concat!("Size of: ", stringify!(_IO_FILE))
  );
  assert_eq!(
    ::std::mem::align_of::<_IO_FILE>(),
    8usize,
    concat!("Alignment of ", stringify!(_IO_FILE))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_read_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_ptr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_write_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_buf_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
    80usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_backup_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
    88usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_IO_save_end)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
    96usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_markers)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
    104usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_chain)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
    112usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_fileno)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
    116usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_flags2)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
    120usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_old_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
    128usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_cur_column)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
    130usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_vtable_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
    131usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_shortbuf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
    136usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_lock)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
    144usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
    152usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_codecvt)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
    160usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_wide_data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
    168usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_list)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
    176usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_freeres_buf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
    184usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(__pad5)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
    192usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_mode)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
    196usize,
    concat!(
      "Offset of field: ",
      stringify!(_IO_FILE),
      "::",
      stringify!(_unused2)
    )
  );
}
pub type nlink_t = __nlink_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
  pub iov_base: *mut ::std::os::raw::c_void,
  pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
  assert_eq!(
    ::std::mem::size_of::<iovec>(),
    16usize,
    concat!("Size of: ", stringify!(iovec))
  );
  assert_eq!(
    ::std::mem::align_of::<iovec>(),
    8usize,
    concat!("Alignment of ", stringify!(iovec))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(iovec),
      "::",
      stringify!(iov_base)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(iovec),
      "::",
      stringify!(iov_len)
    )
  );
}
pub type socklen_t = __socklen_t;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
  pub sa_family: sa_family_t,
  pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
  assert_eq!(
    ::std::mem::size_of::<sockaddr>(),
    16usize,
    concat!("Size of: ", stringify!(sockaddr))
  );
  assert_eq!(
    ::std::mem::align_of::<sockaddr>(),
    2usize,
    concat!("Alignment of ", stringify!(sockaddr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr),
      "::",
      stringify!(sa_family)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr),
      "::",
      stringify!(sa_data)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
  pub msg_name: *mut ::std::os::raw::c_void,
  pub msg_namelen: socklen_t,
  pub msg_iov: *mut iovec,
  pub msg_iovlen: usize,
  pub msg_control: *mut ::std::os::raw::c_void,
  pub msg_controllen: usize,
  pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
  assert_eq!(
    ::std::mem::size_of::<msghdr>(),
    56usize,
    concat!("Size of: ", stringify!(msghdr))
  );
  assert_eq!(
    ::std::mem::align_of::<msghdr>(),
    8usize,
    concat!("Alignment of ", stringify!(msghdr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_name)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_namelen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_iov)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_iovlen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_control)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_controllen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(msghdr),
      "::",
      stringify!(msg_flags)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
  pub ai_flags: ::std::os::raw::c_int,
  pub ai_family: ::std::os::raw::c_int,
  pub ai_socktype: ::std::os::raw::c_int,
  pub ai_protocol: ::std::os::raw::c_int,
  pub ai_addrlen: socklen_t,
  pub ai_addr: *mut sockaddr,
  pub ai_canonname: *mut ::std::os::raw::c_char,
  pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
  assert_eq!(
    ::std::mem::size_of::<addrinfo>(),
    48usize,
    concat!("Size of: ", stringify!(addrinfo))
  );
  assert_eq!(
    ::std::mem::align_of::<addrinfo>(),
    8usize,
    concat!("Alignment of ", stringify!(addrinfo))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_flags)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_family)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_socktype)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_protocol)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_addrlen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_addr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_canonname)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(addrinfo),
      "::",
      stringify!(ai_next)
    )
  );
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __u32 = ::std::os::raw::c_uint;
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_nl {
  pub nl_family: __kernel_sa_family_t,
  pub nl_pad: ::std::os::raw::c_ushort,
  pub nl_pid: __u32,
  pub nl_groups: __u32,
}
#[test]
fn bindgen_test_layout_sockaddr_nl() {
  assert_eq!(
    ::std::mem::size_of::<sockaddr_nl>(),
    12usize,
    concat!("Size of: ", stringify!(sockaddr_nl))
  );
  assert_eq!(
    ::std::mem::align_of::<sockaddr_nl>(),
    4usize,
    concat!("Alignment of ", stringify!(sockaddr_nl))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_family as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr_nl),
      "::",
      stringify!(nl_family)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pad as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr_nl),
      "::",
      stringify!(nl_pad)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pid as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr_nl),
      "::",
      stringify!(nl_pid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_groups as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(sockaddr_nl),
      "::",
      stringify!(nl_groups)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsghdr {
  pub nlmsg_len: __u32,
  pub nlmsg_type: __u16,
  pub nlmsg_flags: __u16,
  pub nlmsg_seq: __u32,
  pub nlmsg_pid: __u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
  assert_eq!(
    ::std::mem::size_of::<nlmsghdr>(),
    16usize,
    concat!("Size of: ", stringify!(nlmsghdr))
  );
  assert_eq!(
    ::std::mem::align_of::<nlmsghdr>(),
    4usize,
    concat!("Alignment of ", stringify!(nlmsghdr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_len as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsghdr),
      "::",
      stringify!(nlmsg_len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_type as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsghdr),
      "::",
      stringify!(nlmsg_type)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_flags as *const _ as usize },
    6usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsghdr),
      "::",
      stringify!(nlmsg_flags)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_seq as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsghdr),
      "::",
      stringify!(nlmsg_seq)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_pid as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsghdr),
      "::",
      stringify!(nlmsg_pid)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsgerr {
  pub error: ::std::os::raw::c_int,
  pub msg: nlmsghdr,
}
#[test]
fn bindgen_test_layout_nlmsgerr() {
  assert_eq!(
    ::std::mem::size_of::<nlmsgerr>(),
    20usize,
    concat!("Size of: ", stringify!(nlmsgerr))
  );
  assert_eq!(
    ::std::mem::align_of::<nlmsgerr>(),
    4usize,
    concat!("Alignment of ", stringify!(nlmsgerr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsgerr>())).error as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsgerr),
      "::",
      stringify!(error)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlmsgerr>())).msg as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nlmsgerr),
      "::",
      stringify!(msg)
    )
  );
}
pub const nlmsgerr_attrs_NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const nlmsgerr_attrs___NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 4;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 3;
pub type nlmsgerr_attrs = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_pktinfo {
  pub group: __u32,
}
#[test]
fn bindgen_test_layout_nl_pktinfo() {
  assert_eq!(
    ::std::mem::size_of::<nl_pktinfo>(),
    4usize,
    concat!("Size of: ", stringify!(nl_pktinfo))
  );
  assert_eq!(
    ::std::mem::align_of::<nl_pktinfo>(),
    4usize,
    concat!("Alignment of ", stringify!(nl_pktinfo))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_pktinfo>())).group as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_pktinfo),
      "::",
      stringify!(group)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_req {
  pub nm_block_size: ::std::os::raw::c_uint,
  pub nm_block_nr: ::std::os::raw::c_uint,
  pub nm_frame_size: ::std::os::raw::c_uint,
  pub nm_frame_nr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nl_mmap_req() {
  assert_eq!(
    ::std::mem::size_of::<nl_mmap_req>(),
    16usize,
    concat!("Size of: ", stringify!(nl_mmap_req))
  );
  assert_eq!(
    ::std::mem::align_of::<nl_mmap_req>(),
    4usize,
    concat!("Alignment of ", stringify!(nl_mmap_req))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_size as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_req),
      "::",
      stringify!(nm_block_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_nr as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_req),
      "::",
      stringify!(nm_block_nr)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_size as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_req),
      "::",
      stringify!(nm_frame_size)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_nr as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_req),
      "::",
      stringify!(nm_frame_nr)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_hdr {
  pub nm_status: ::std::os::raw::c_uint,
  pub nm_len: ::std::os::raw::c_uint,
  pub nm_group: __u32,
  pub nm_pid: __u32,
  pub nm_uid: __u32,
  pub nm_gid: __u32,
}
#[test]
fn bindgen_test_layout_nl_mmap_hdr() {
  assert_eq!(
    ::std::mem::size_of::<nl_mmap_hdr>(),
    24usize,
    concat!("Size of: ", stringify!(nl_mmap_hdr))
  );
  assert_eq!(
    ::std::mem::align_of::<nl_mmap_hdr>(),
    4usize,
    concat!("Alignment of ", stringify!(nl_mmap_hdr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_status as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_status)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_len as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_group as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_group)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_pid as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_pid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_uid as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_uid)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_gid as *const _ as usize },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_mmap_hdr),
      "::",
      stringify!(nm_gid)
    )
  );
}
pub const nl_mmap_status_NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const nl_mmap_status_NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const nl_mmap_status_NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const nl_mmap_status_NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const nl_mmap_status_NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = u32;
pub const NETLINK_UNCONNECTED: _bindgen_ty_7 = 0;
pub const NETLINK_CONNECTED: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlattr {
  pub nla_len: __u16,
  pub nla_type: __u16,
}
#[test]
fn bindgen_test_layout_nlattr() {
  assert_eq!(
    ::std::mem::size_of::<nlattr>(),
    4usize,
    concat!("Size of: ", stringify!(nlattr))
  );
  assert_eq!(
    ::std::mem::align_of::<nlattr>(),
    2usize,
    concat!("Alignment of ", stringify!(nlattr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlattr>())).nla_len as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nlattr),
      "::",
      stringify!(nla_len)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nlattr>())).nla_type as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(nlattr),
      "::",
      stringify!(nla_type)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_bitfield32 {
  pub value: __u32,
  pub selector: __u32,
}
#[test]
fn bindgen_test_layout_nla_bitfield32() {
  assert_eq!(
    ::std::mem::size_of::<nla_bitfield32>(),
    8usize,
    concat!("Size of: ", stringify!(nla_bitfield32))
  );
  assert_eq!(
    ::std::mem::align_of::<nla_bitfield32>(),
    4usize,
    concat!("Alignment of ", stringify!(nla_bitfield32))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).value as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nla_bitfield32),
      "::",
      stringify!(value)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).selector as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nla_bitfield32),
      "::",
      stringify!(selector)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct genlmsghdr {
  pub cmd: __u8,
  pub version: __u8,
  pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_genlmsghdr() {
  assert_eq!(
    ::std::mem::size_of::<genlmsghdr>(),
    4usize,
    concat!("Size of: ", stringify!(genlmsghdr))
  );
  assert_eq!(
    ::std::mem::align_of::<genlmsghdr>(),
    2usize,
    concat!("Alignment of ", stringify!(genlmsghdr))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<genlmsghdr>())).cmd as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(genlmsghdr),
      "::",
      stringify!(cmd)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<genlmsghdr>())).version as *const _ as usize },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(genlmsghdr),
      "::",
      stringify!(version)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<genlmsghdr>())).reserved as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(genlmsghdr),
      "::",
      stringify!(reserved)
    )
  );
}
extern "C" {
  #[link_name = "\u{1}nl_ver_num"]
  pub static nl_ver_num: ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}nl_ver_maj"]
  pub static nl_ver_maj: ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}nl_ver_min"]
  pub static nl_ver_min: ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}nl_ver_mic"]
  pub static nl_ver_mic: ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_geterror(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_perror(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn nl_syserr2nlerr(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[doc = "< Dump object briefly on one line"]
pub const nl_dump_type_NL_DUMP_LINE: nl_dump_type = 0;
#[doc = "< Dump all attributes but no statistics"]
pub const nl_dump_type_NL_DUMP_DETAILS: nl_dump_type = 1;
#[doc = "< Dump all attributes including statistics"]
pub const nl_dump_type_NL_DUMP_STATS: nl_dump_type = 2;
pub const nl_dump_type___NL_DUMP_MAX: nl_dump_type = 3;
#[doc = " @ingroup utils"]
#[doc = " Enumeration of dumping variations (dp_type)"]
pub type nl_dump_type = u32;
#[doc = " @ingroup utils"]
#[doc = " Dumping parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_dump_params {
  #[doc = " Specifies the type of dump that is requested."]
  pub dp_type: nl_dump_type,
  #[doc = " Specifies the number of whitespaces to be put in front"]
  #[doc = " of every new line (indentation)."]
  pub dp_prefix: ::std::os::raw::c_int,
  #[doc = " Causes the cache index to be printed for each element."]
  pub dp_print_index: ::std::os::raw::c_int,
  #[doc = " Causes each element to be prefixed with the message type."]
  pub dp_dump_msgtype: ::std::os::raw::c_int,
  #[doc = " A callback invoked for output"]
  #[doc = ""]
  #[doc = " Passed arguments are:"]
  #[doc = "  - dumping parameters"]
  #[doc = "  - string to append to the output"]
  pub dp_cb: ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut nl_dump_params, arg2: *mut ::std::os::raw::c_char),
  >,
  #[doc = " A callback invoked for every new line, can be used to"]
  #[doc = " customize the indentation."]
  #[doc = ""]
  #[doc = " Passed arguments are:"]
  #[doc = "  - dumping parameters"]
  #[doc = "  - line number starting from 0"]
  pub dp_nl_cb: ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut nl_dump_params, arg2: ::std::os::raw::c_int),
  >,
  #[doc = " User data pointer, can be used to pass data to callbacks."]
  pub dp_data: *mut ::std::os::raw::c_void,
  #[doc = " File descriptor the dumping output should go to"]
  pub dp_fd: *mut FILE,
  #[doc = " Alternatively the output may be redirected into a buffer"]
  pub dp_buf: *mut ::std::os::raw::c_char,
  #[doc = " Length of the buffer dp_buf"]
  pub dp_buflen: usize,
  #[doc = " PRIVATE"]
  #[doc = " Set if a dump was performed prior to the actual dump handler."]
  pub dp_pre_dump: ::std::os::raw::c_int,
  #[doc = " PRIVATE"]
  #[doc = " Owned by the current caller"]
  pub dp_ivar: ::std::os::raw::c_int,
  pub dp_line: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nl_dump_params() {
  assert_eq!(
    ::std::mem::size_of::<nl_dump_params>(),
    80usize,
    concat!("Size of: ", stringify!(nl_dump_params))
  );
  assert_eq!(
    ::std::mem::align_of::<nl_dump_params>(),
    8usize,
    concat!("Alignment of ", stringify!(nl_dump_params))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_type as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_type)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_prefix as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_prefix)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_print_index as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_print_index)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_dump_msgtype as *const _ as usize },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_dump_msgtype)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_cb as *const _ as usize },
    16usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_cb)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_nl_cb as *const _ as usize },
    24usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_nl_cb)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_data as *const _ as usize },
    32usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_data)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_fd as *const _ as usize },
    40usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_fd)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_buf as *const _ as usize },
    48usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_buf)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_buflen as *const _ as usize },
    56usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_buflen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_pre_dump as *const _ as usize },
    64usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_pre_dump)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_ivar as *const _ as usize },
    68usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_ivar)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_dump_params>())).dp_line as *const _ as usize },
    72usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_dump_params),
      "::",
      stringify!(dp_line)
    )
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucred {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_cb {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_sock {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_msg {
  _unused: [u8; 0],
}
#[doc = " nl_recvmsgs() callback for message processing customization"]
#[doc = " @ingroup cb"]
#[doc = " @arg msg\t\tnetlink message being processed"]
#[doc = " @arg arg\t\targument passwd on through caller"]
pub type nl_recvmsg_msg_cb_t = ::std::option::Option<
  unsafe extern "C" fn(msg: *mut nl_msg, arg: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[doc = " nl_recvmsgs() callback for error message processing customization"]
#[doc = " @ingroup cb"]
#[doc = " @arg nla\t\tnetlink address of the peer"]
#[doc = " @arg nlerr\t\tnetlink error message being processed"]
#[doc = " @arg arg\t\targument passed on through caller"]
pub type nl_recvmsg_err_cb_t = ::std::option::Option<
  unsafe extern "C" fn(
    nla: *mut sockaddr_nl,
    nlerr: *mut nlmsgerr,
    arg: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int,
>;
#[doc = " Proceed with wathever would come next"]
pub const nl_cb_action_NL_OK: nl_cb_action = 0;
#[doc = " Skip this message"]
pub const nl_cb_action_NL_SKIP: nl_cb_action = 1;
#[doc = " Stop parsing altogether and discard remaining messages"]
pub const nl_cb_action_NL_STOP: nl_cb_action = 2;
#[doc = " Callback actions"]
#[doc = " @ingroup cb"]
pub type nl_cb_action = u32;
#[doc = " Default handlers (quiet)"]
pub const nl_cb_kind_NL_CB_DEFAULT: nl_cb_kind = 0;
#[doc = " Verbose default handlers (error messages printed)"]
pub const nl_cb_kind_NL_CB_VERBOSE: nl_cb_kind = 1;
#[doc = " Debug handlers for debugging"]
pub const nl_cb_kind_NL_CB_DEBUG: nl_cb_kind = 2;
#[doc = " Customized handler specified by the user"]
pub const nl_cb_kind_NL_CB_CUSTOM: nl_cb_kind = 3;
#[doc = " Customized handler specified by the user"]
pub const nl_cb_kind___NL_CB_KIND_MAX: nl_cb_kind = 4;
#[doc = " Callback kinds"]
#[doc = " @ingroup cb"]
pub type nl_cb_kind = u32;
#[doc = " Message is valid"]
pub const nl_cb_type_NL_CB_VALID: nl_cb_type = 0;
#[doc = " Last message in a series of multi part messages received"]
pub const nl_cb_type_NL_CB_FINISH: nl_cb_type = 1;
#[doc = " Report received that data was lost"]
pub const nl_cb_type_NL_CB_OVERRUN: nl_cb_type = 2;
#[doc = " Message wants to be skipped"]
pub const nl_cb_type_NL_CB_SKIPPED: nl_cb_type = 3;
#[doc = " Message is an acknowledge"]
pub const nl_cb_type_NL_CB_ACK: nl_cb_type = 4;
#[doc = " Called for every message received"]
pub const nl_cb_type_NL_CB_MSG_IN: nl_cb_type = 5;
#[doc = " Called for every message sent out except for nl_sendto()"]
pub const nl_cb_type_NL_CB_MSG_OUT: nl_cb_type = 6;
#[doc = " Message is malformed and invalid"]
pub const nl_cb_type_NL_CB_INVALID: nl_cb_type = 7;
#[doc = " Called instead of internal sequence number checking"]
pub const nl_cb_type_NL_CB_SEQ_CHECK: nl_cb_type = 8;
#[doc = " Sending of an acknowledge message has been requested"]
pub const nl_cb_type_NL_CB_SEND_ACK: nl_cb_type = 9;
#[doc = " Flag NLM_F_DUMP_INTR is set in message"]
pub const nl_cb_type_NL_CB_DUMP_INTR: nl_cb_type = 10;
#[doc = " Flag NLM_F_DUMP_INTR is set in message"]
pub const nl_cb_type___NL_CB_TYPE_MAX: nl_cb_type = 11;
#[doc = " Callback types"]
#[doc = " @ingroup cb"]
pub type nl_cb_type = u32;
extern "C" {
  pub fn nl_cb_alloc(arg1: nl_cb_kind) -> *mut nl_cb;
}
extern "C" {
  pub fn nl_cb_clone(arg1: *mut nl_cb) -> *mut nl_cb;
}
extern "C" {
  pub fn nl_cb_get(arg1: *mut nl_cb) -> *mut nl_cb;
}
extern "C" {
  pub fn nl_cb_put(arg1: *mut nl_cb);
}
extern "C" {
  pub fn nl_cb_set(
    arg1: *mut nl_cb,
    arg2: nl_cb_type,
    arg3: nl_cb_kind,
    arg4: nl_recvmsg_msg_cb_t,
    arg5: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cb_set_all(
    arg1: *mut nl_cb,
    arg2: nl_cb_kind,
    arg3: nl_recvmsg_msg_cb_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cb_err(
    arg1: *mut nl_cb,
    arg2: nl_cb_kind,
    arg3: nl_recvmsg_err_cb_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cb_overwrite_recvmsgs(
    arg1: *mut nl_cb,
    func: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_sock, arg2: *mut nl_cb) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn nl_cb_overwrite_recv(
    arg1: *mut nl_cb,
    func: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut nl_sock,
        arg2: *mut sockaddr_nl,
        arg3: *mut *mut ::std::os::raw::c_uchar,
        arg4: *mut *mut ucred,
      ) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn nl_cb_overwrite_send(
    arg1: *mut nl_cb,
    func: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_sock, arg2: *mut nl_msg) -> ::std::os::raw::c_int,
    >,
  );
}
extern "C" {
  pub fn nl_cb_active_type(cb: *mut nl_cb) -> nl_cb_type;
}
extern "C" {
  pub fn nl_socket_alloc() -> *mut nl_sock;
}
extern "C" {
  pub fn nl_socket_alloc_cb(arg1: *mut nl_cb) -> *mut nl_sock;
}
extern "C" {
  pub fn nl_socket_free(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_socket_get_local_port(arg1: *const nl_sock) -> u32;
}
extern "C" {
  pub fn nl_socket_set_local_port(arg1: *mut nl_sock, arg2: u32);
}
extern "C" {
  pub fn nl_socket_add_memberships(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_add_membership(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_drop_memberships(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    ...
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_drop_membership(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_join_groups(arg1: *mut nl_sock, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nl_socket_get_peer_port(arg1: *const nl_sock) -> u32;
}
extern "C" {
  pub fn nl_socket_set_peer_port(arg1: *mut nl_sock, arg2: u32);
}
extern "C" {
  pub fn nl_socket_get_peer_groups(sk: *const nl_sock) -> u32;
}
extern "C" {
  pub fn nl_socket_set_peer_groups(sk: *mut nl_sock, groups: u32);
}
extern "C" {
  pub fn nl_socket_get_cb(arg1: *const nl_sock) -> *mut nl_cb;
}
extern "C" {
  pub fn nl_socket_set_cb(arg1: *mut nl_sock, arg2: *mut nl_cb);
}
extern "C" {
  pub fn nl_socket_modify_cb(
    arg1: *mut nl_sock,
    arg2: nl_cb_type,
    arg3: nl_cb_kind,
    arg4: nl_recvmsg_msg_cb_t,
    arg5: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_modify_err_cb(
    arg1: *mut nl_sock,
    arg2: nl_cb_kind,
    arg3: nl_recvmsg_err_cb_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_set_buffer_size(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_set_msg_buf_size(arg1: *mut nl_sock, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_get_msg_buf_size(arg1: *mut nl_sock) -> usize;
}
extern "C" {
  pub fn nl_socket_set_passcred(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_recv_pktinfo(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_disable_seq_check(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_socket_use_seq(arg1: *mut nl_sock) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn nl_socket_disable_auto_ack(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_socket_enable_auto_ack(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_socket_get_fd(arg1: *const nl_sock) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_set_fd(
    sk: *mut nl_sock,
    protocol: ::std::os::raw::c_int,
    fd: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_set_nonblocking(arg1: *const nl_sock) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_socket_enable_msg_peek(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_socket_disable_msg_peek(arg1: *mut nl_sock);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_list_head {
  pub next: *mut nl_list_head,
  pub prev: *mut nl_list_head,
}
#[test]
fn bindgen_test_layout_nl_list_head() {
  assert_eq!(
    ::std::mem::size_of::<nl_list_head>(),
    16usize,
    concat!("Size of: ", stringify!(nl_list_head))
  );
  assert_eq!(
    ::std::mem::align_of::<nl_list_head>(),
    8usize,
    concat!("Alignment of ", stringify!(nl_list_head))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_list_head>())).next as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_list_head),
      "::",
      stringify!(next)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl_list_head>())).prev as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl_list_head),
      "::",
      stringify!(prev)
    )
  );
}
pub const NL_BYTE_RATE: _bindgen_ty_66 = 0;
pub const NL_BIT_RATE: _bindgen_ty_66 = 1;
#[doc = " @}"]
pub type _bindgen_ty_66 = u32;
extern "C" {
  pub fn nl_cancel_down_bytes(
    arg1: ::std::os::raw::c_ulonglong,
    arg2: *mut *mut ::std::os::raw::c_char,
  ) -> f64;
}
extern "C" {
  pub fn nl_cancel_down_bits(
    arg1: ::std::os::raw::c_ulonglong,
    arg2: *mut *mut ::std::os::raw::c_char,
  ) -> f64;
}
extern "C" {
  pub fn nl_rate2str(
    arg1: ::std::os::raw::c_ulonglong,
    arg2: ::std::os::raw::c_int,
    arg3: *mut ::std::os::raw::c_char,
    arg4: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cancel_down_us(arg1: u32, arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
  pub fn nl_size2int(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn nl_size2str(
    arg1: usize,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_prob2int(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
  pub fn nl_get_user_hz() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_get_psched_hz() -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_us2ticks(arg1: u32) -> u32;
}
extern "C" {
  pub fn nl_ticks2us(arg1: u32) -> u32;
}
extern "C" {
  pub fn nl_str2msec(arg1: *const ::std::os::raw::c_char, arg2: *mut u64) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_msec2str(
    arg1: u64,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_llproto2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2llproto(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_ether_proto2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2ether_proto(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_ip_proto2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2ip_proto(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_new_line(arg1: *mut nl_dump_params);
}
extern "C" {
  pub fn nl_dump(arg1: *mut nl_dump_params, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
  pub fn nl_dump_line(arg1: *mut nl_dump_params, arg2: *const ::std::os::raw::c_char, ...);
}
pub const NL_CAPABILITY_NONE: _bindgen_ty_67 = 0;
#[doc = " rtnl_route_build_msg() no longer guesses the route scope"]
#[doc = " if explicitly set to RT_SCOPE_NOWHERE."]
#[doc = " @ingroup utils"]
pub const NL_CAPABILITY_ROUTE_BUILD_MSG_SET_SCOPE: _bindgen_ty_67 = 1;
#[doc = " rtnl_link_veth_get_peer() now returns a reference that is owned by the"]
#[doc = " caller and must be released by the caller with rtnl_link_put()."]
pub const NL_CAPABILITY_ROUTE_LINK_VETH_GET_PEER_OWN_REFERENCE: _bindgen_ty_67 = 2;
#[doc = " rtnl_u32_add_action() and rtnl_basic_add_action() now grab a reference to act"]
#[doc = " caller are free to release its own"]
pub const NL_CAPABILITY_ROUTE_LINK_CLS_ADD_ACT_OWN_REFERENCE: _bindgen_ty_67 = 3;
#[doc = " Indicate that the local port is unspecified until the user accesses"]
#[doc = " it (via nl_socket_get_local_port()) or until nl_connect(). More importantly,"]
#[doc = " if the port is left unspecified, nl_connect() will retry generating another"]
#[doc = " port when bind() fails with ADDRINUSE."]
pub const NL_CAPABILITY_NL_CONNECT_RETRY_GENERATE_PORT_ON_ADDRINUSE: _bindgen_ty_67 = 4;
#[doc = " Indicate that rtnl_link_get_kernel() fails with -NLE_OPNOTSUPP in case"]
#[doc = " of older kernals not supporting lookup by ifname. This changes behavior"]
#[doc = " from returning -NLE_INVAL to return -NLE_OPNOTSUPP."]
pub const NL_CAPABILITY_ROUTE_LINK_GET_KERNEL_FAIL_OPNOTSUPP: _bindgen_ty_67 = 5;
#[doc = " Also consider the a_cacheinfo field (ADDR_ATTR_CACHEINFO) that contains the"]
#[doc = " address timestamps and expiry when comparing struct rtnl_addr objects with"]
#[doc = " nl_object_diff()."]
pub const NL_CAPABILITY_ROUTE_ADDR_COMPARE_CACHEINFO: _bindgen_ty_67 = 6;
#[doc = " The library version is libnl3 3.2.26 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_2_26: _bindgen_ty_67 = 7;
#[doc = " nl_recv() fails with NLE_MSG_TRUNC if a message got truncated"]
#[doc = " with NL_MSG_PEEK disabled. Previously, the failed message was wrongly"]
#[doc = " discarded and the next message received."]
pub const NL_CAPABILITY_NL_RECV_FAIL_TRUNC_NO_PEEK: _bindgen_ty_67 = 8;
#[doc = " rtnl_link_build_change_request() and rtnl_link_change() would set ifi.ifi_flags but leave"]
#[doc = " ifi.ifi_change at zero. This was later fixed to set ifi.ifi_change to the flags that are actually"]
#[doc = " set in changes."]
pub const NL_CAPABILITY_LINK_BUILD_CHANGE_REQUEST_SET_CHANGE: _bindgen_ty_67 = 9;
#[doc = " Between 3.2.14 (64fcb47a36ec12d7e7f00605f6a8952ce985dd08) and 3.2.22 (8571f58f23763d8db7365d02c9b27832ad3d7005),"]
#[doc = " rtnl_neigh_get() behaved differently and only returned objects with family AF_UNSPEC."]
#[doc = " This capability indicates, that the function was fixed. The absense of the capability,"]
#[doc = " doesn\'t indicate however which behavior the function will have. So beware."]
pub const NL_CAPABILITY_RTNL_NEIGH_GET_FILTER_AF_UNSPEC_FIX: _bindgen_ty_67 = 10;
#[doc = " The library version is libnl3 3.2.27 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_2_27: _bindgen_ty_67 = 11;
#[doc = " Properly serialize vlan protocol IFLA_VLAN_PROTOCOL."]
pub const NL_CAPABILITY_RTNL_LINK_VLAN_PROTOCOL_SERIALZE: _bindgen_ty_67 = 12;
#[doc = " Properly read gre REMOTE port."]
pub const NL_CAPABILITY_RTNL_LINK_PARSE_GRE_REMOTE: _bindgen_ty_67 = 13;
#[doc = " Don\'t skip over vlan ingress-map entries with \"to\" field zero when serializing"]
#[doc = " a netlink message. Previously such entires would be ignored which inhibits the"]
#[doc = " user from clearing ingress map entries."]
pub const NL_CAPABILITY_RTNL_LINK_VLAN_INGRESS_MAP_CLEAR: _bindgen_ty_67 = 14;
#[doc = " Consider vxlan link info for nl_object_diff()."]
pub const NL_CAPABILITY_RTNL_LINK_VXLAN_IO_COMPARE: _bindgen_ty_67 = 15;
#[doc = " Support 64 bit attributes for nl_object_diff()."]
pub const NL_CAPABILITY_NL_OBJECT_DIFF64: _bindgen_ty_67 = 16;
#[doc = " Support omitting @key argument to xfrmnl_sa_get_*_params() to check"]
#[doc = " for required buffer size for key."]
pub const NL_CAPABILITY_XFRM_SA_KEY_SIZE: _bindgen_ty_67 = 17;
#[doc = " Properly handle nl_object_identity() for AF_INET and AF_INET6 addresses"]
#[doc = " and properly handle the peer/IFA_ADDRESS for IPv4 addresses."]
pub const NL_CAPABILITY_RTNL_ADDR_PEER_FIX: _bindgen_ty_67 = 18;
#[doc = " The library version is libnl3 3.2.28 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_2_28: _bindgen_ty_67 = 19;
#[doc = " After NL_CAPABILITY_RTNL_ADDR_PEER_FIX, a follow up regression to lookup"]
#[doc = " IPv4 addresses in the cache was fixed (PR#105)."]
pub const NL_CAPABILITY_RTNL_ADDR_PEER_ID_FIX: _bindgen_ty_67 = 20;
#[doc = " nl_addr_fill_sockaddr() properly checks that the provided address to"]
#[doc = " avoid read-out-of-bounds for invalid addresses."]
pub const NL_CAPABILITY_NL_ADDR_FILL_SOCKADDR: _bindgen_ty_67 = 21;
#[doc = " Support omitting @ctx_str argument to xfrmnl_sa_get_sec_ctx() to check"]
#[doc = " for required buffer size for context string."]
pub const NL_CAPABILITY_XFRM_SEC_CTX_LEN: _bindgen_ty_67 = 22;
#[doc = " rtnl_link_build_add_request() would set ifi.ifi_flags but leave ifi.ifi_change at zero."]
#[doc = " This was later fixed to set ifi.ifi_change to the flags that are actually"]
#[doc = " set"]
pub const NL_CAPABILITY_LINK_BUILD_ADD_REQUEST_SET_CHANGE: _bindgen_ty_67 = 23;
pub const NL_CAPABILITY_NL_RECVMSGS_PEEK_BY_DEFAULT: _bindgen_ty_67 = 24;
#[doc = " The library version is libnl3 3.2.29 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_2_29: _bindgen_ty_67 = 25;
#[doc = " Support omitting @ctx_str argument to xfrmnl_sp_get_sec_ctx() to check"]
#[doc = " for required buffer size for context string."]
pub const NL_CAPABILITY_XFRM_SP_SEC_CTX_LEN: _bindgen_ty_67 = 26;
#[doc = " The library version is libnl3 3.3.0 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_3_0: _bindgen_ty_67 = 27;
#[doc = " The library version is libnl3 3.4.0 or newer. This capability should never be backported."]
pub const NL_CAPABILITY_VERSION_3_4_0: _bindgen_ty_67 = 28;
pub const __NL_CAPABILITY_MAX: _bindgen_ty_67 = 29;
pub const NL_CAPABILITY_MAX: _bindgen_ty_67 = 28;
pub type _bindgen_ty_67 = u32;
extern "C" {
  pub fn nl_has_capability(capability: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_cache {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_object {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_object_ops {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nl_object_alloc(arg1: *mut nl_object_ops) -> *mut nl_object;
}
extern "C" {
  pub fn nl_object_alloc_name(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut *mut nl_object,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_free(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_object_clone(obj: *mut nl_object) -> *mut nl_object;
}
extern "C" {
  pub fn nl_object_update(dst: *mut nl_object, src: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_get(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_object_put(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_object_shared(arg1: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_dump(arg1: *mut nl_object, arg2: *mut nl_dump_params);
}
extern "C" {
  pub fn nl_object_dump_buf(arg1: *mut nl_object, arg2: *mut ::std::os::raw::c_char, arg3: usize);
}
extern "C" {
  pub fn nl_object_identical(arg1: *mut nl_object, arg2: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_diff(arg1: *mut nl_object, arg2: *mut nl_object) -> u32;
}
extern "C" {
  pub fn nl_object_diff64(arg1: *mut nl_object, arg2: *mut nl_object) -> u64;
}
extern "C" {
  pub fn nl_object_match_filter(
    arg1: *mut nl_object,
    arg2: *mut nl_object,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_attrs2str(
    arg1: *mut nl_object,
    attrs: u32,
    buf: *mut ::std::os::raw::c_char,
    arg2: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_object_attr_list(
    arg1: *mut nl_object,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_object_keygen(arg1: *mut nl_object, arg2: *mut u32, arg3: u32);
}
extern "C" {
  pub fn nl_object_mark(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_object_unmark(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_object_is_marked(arg1: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_get_refcnt(arg1: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_get_cache(arg1: *mut nl_object) -> *mut nl_cache;
}
extern "C" {
  pub fn nl_object_get_type(arg1: *const nl_object) -> *const ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_object_get_msgtype(arg1: *const nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_object_get_ops(arg1: *const nl_object) -> *mut nl_object_ops;
}
extern "C" {
  pub fn nl_object_get_id_attrs(obj: *mut nl_object) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_cache_ops {
  _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_parser_param {
  _unused: [u8; 0],
}
extern "C" {
  #[link_name = "\u{1}nl_debug"]
  pub static mut nl_debug: ::std::os::raw::c_int;
}
extern "C" {
  #[link_name = "\u{1}nl_debug_dp"]
  pub static mut nl_debug_dp: nl_dump_params;
}
extern "C" {
  pub fn nl_connect(arg1: *mut nl_sock, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_close(arg1: *mut nl_sock);
}
extern "C" {
  pub fn nl_sendto(
    arg1: *mut nl_sock,
    arg2: *mut ::std::os::raw::c_void,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_sendmsg(
    arg1: *mut nl_sock,
    arg2: *mut nl_msg,
    arg3: *mut msghdr,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_send(arg1: *mut nl_sock, arg2: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_send_iovec(
    arg1: *mut nl_sock,
    arg2: *mut nl_msg,
    arg3: *mut iovec,
    arg4: ::std::os::raw::c_uint,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_complete_msg(arg1: *mut nl_sock, arg2: *mut nl_msg);
}
extern "C" {
  pub fn nl_auto_complete(arg1: *mut nl_sock, arg2: *mut nl_msg);
}
extern "C" {
  pub fn nl_send_auto(arg1: *mut nl_sock, arg2: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_send_auto_complete(arg1: *mut nl_sock, arg2: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_send_sync(arg1: *mut nl_sock, arg2: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_send_simple(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *mut ::std::os::raw::c_void,
    arg5: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_recv(
    arg1: *mut nl_sock,
    arg2: *mut sockaddr_nl,
    arg3: *mut *mut ::std::os::raw::c_uchar,
    arg4: *mut *mut ucred,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_recvmsgs(arg1: *mut nl_sock, arg2: *mut nl_cb) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_recvmsgs_report(arg1: *mut nl_sock, arg2: *mut nl_cb) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_recvmsgs_default(arg1: *mut nl_sock) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_wait_for_ack(arg1: *mut nl_sock) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_pickup(
    arg1: *mut nl_sock,
    parser: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut nl_cache_ops,
        arg2: *mut sockaddr_nl,
        arg3: *mut nlmsghdr,
        arg4: *mut nl_parser_param,
      ) -> ::std::os::raw::c_int,
    >,
    arg2: *mut *mut nl_object,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_pickup_keep_syserr(
    sk: *mut nl_sock,
    parser: ::std::option::Option<
      unsafe extern "C" fn(
        arg1: *mut nl_cache_ops,
        arg2: *mut sockaddr_nl,
        arg3: *mut nlmsghdr,
        arg4: *mut nl_parser_param,
      ) -> ::std::os::raw::c_int,
    >,
    result: *mut *mut nl_object,
    syserror: *mut ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_nlfamily2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2nlfamily(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_addr {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nl_addr_alloc(arg1: usize) -> *mut nl_addr;
}
extern "C" {
  pub fn nl_addr_alloc_attr(arg1: *const nlattr, arg2: ::std::os::raw::c_int) -> *mut nl_addr;
}
extern "C" {
  pub fn nl_addr_build(
    arg1: ::std::os::raw::c_int,
    arg2: *const ::std::os::raw::c_void,
    arg3: usize,
  ) -> *mut nl_addr;
}
extern "C" {
  pub fn nl_addr_parse(
    arg1: *const ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
    arg3: *mut *mut nl_addr,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_clone(arg1: *const nl_addr) -> *mut nl_addr;
}
extern "C" {
  pub fn nl_addr_get(arg1: *mut nl_addr) -> *mut nl_addr;
}
extern "C" {
  pub fn nl_addr_put(arg1: *mut nl_addr);
}
extern "C" {
  pub fn nl_addr_shared(arg1: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_cmp(arg1: *const nl_addr, arg2: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_cmp_prefix(arg1: *const nl_addr, arg2: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_iszero(arg1: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_valid(
    arg1: *const ::std::os::raw::c_char,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_guess_family(arg1: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_fill_sockaddr(
    arg1: *const nl_addr,
    arg2: *mut sockaddr,
    arg3: *mut socklen_t,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_info(arg1: *const nl_addr, arg2: *mut *mut addrinfo) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_resolve(
    arg1: *const nl_addr,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_set_family(arg1: *mut nl_addr, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nl_addr_get_family(arg1: *const nl_addr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_set_binary_addr(
    arg1: *mut nl_addr,
    arg2: *const ::std::os::raw::c_void,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr_get_binary_addr(arg1: *const nl_addr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nl_addr_get_len(arg1: *const nl_addr) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn nl_addr_set_prefixlen(arg1: *mut nl_addr, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nl_addr_get_prefixlen(arg1: *const nl_addr) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn nl_af2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2af(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_addr2str(
    arg1: *const nl_addr,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_data {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nl_data_alloc(arg1: *const ::std::os::raw::c_void, arg2: usize) -> *mut nl_data;
}
extern "C" {
  pub fn nl_data_alloc_attr(arg1: *const nlattr) -> *mut nl_data;
}
extern "C" {
  pub fn nl_data_clone(arg1: *const nl_data) -> *mut nl_data;
}
extern "C" {
  pub fn nl_data_append(
    arg1: *mut nl_data,
    arg2: *const ::std::os::raw::c_void,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_data_free(arg1: *mut nl_data);
}
extern "C" {
  pub fn nl_data_get(arg1: *const nl_data) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nl_data_get_size(arg1: *const nl_data) -> usize;
}
extern "C" {
  pub fn nl_data_cmp(arg1: *const nl_data, arg2: *const nl_data) -> ::std::os::raw::c_int;
}
#[doc = "< Unspecified type, binary data chunk"]
pub const NLA_UNSPEC: _bindgen_ty_68 = 0;
#[doc = "< 8 bit integer"]
pub const NLA_U8: _bindgen_ty_68 = 1;
#[doc = "< 16 bit integer"]
pub const NLA_U16: _bindgen_ty_68 = 2;
#[doc = "< 32 bit integer"]
pub const NLA_U32: _bindgen_ty_68 = 3;
#[doc = "< 64 bit integer"]
pub const NLA_U64: _bindgen_ty_68 = 4;
#[doc = "< NUL terminated character string"]
pub const NLA_STRING: _bindgen_ty_68 = 5;
#[doc = "< Flag"]
pub const NLA_FLAG: _bindgen_ty_68 = 6;
#[doc = "< Micro seconds (64bit)"]
pub const NLA_MSECS: _bindgen_ty_68 = 7;
#[doc = "< Nested attributes"]
pub const NLA_NESTED: _bindgen_ty_68 = 8;
pub const NLA_NESTED_COMPAT: _bindgen_ty_68 = 9;
pub const NLA_NUL_STRING: _bindgen_ty_68 = 10;
pub const NLA_BINARY: _bindgen_ty_68 = 11;
pub const NLA_S8: _bindgen_ty_68 = 12;
pub const NLA_S16: _bindgen_ty_68 = 13;
pub const NLA_S32: _bindgen_ty_68 = 14;
pub const NLA_S64: _bindgen_ty_68 = 15;
pub const __NLA_TYPE_MAX: _bindgen_ty_68 = 16;
#[doc = " @ingroup attr"]
#[doc = " Basic attribute data types"]
#[doc = ""]
#[doc = " See section @core_doc{core_attr_parse,Attribute Parsing} for more details."]
pub type _bindgen_ty_68 = u32;
#[doc = " @ingroup attr"]
#[doc = " Attribute validation policy."]
#[doc = ""]
#[doc = " See section @core_doc{core_attr_parse,Attribute Parsing} for more details."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_policy {
  #[doc = " Type of attribute or NLA_UNSPEC"]
  pub type_: u16,
  #[doc = " Minimal length of payload required"]
  pub minlen: u16,
  #[doc = " Maximal length of payload allowed"]
  pub maxlen: u16,
}
#[test]
fn bindgen_test_layout_nla_policy() {
  assert_eq!(
    ::std::mem::size_of::<nla_policy>(),
    6usize,
    concat!("Size of: ", stringify!(nla_policy))
  );
  assert_eq!(
    ::std::mem::align_of::<nla_policy>(),
    2usize,
    concat!("Alignment of ", stringify!(nla_policy))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nla_policy>())).type_ as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nla_policy),
      "::",
      stringify!(type_)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nla_policy>())).minlen as *const _ as usize },
    2usize,
    concat!(
      "Offset of field: ",
      stringify!(nla_policy),
      "::",
      stringify!(minlen)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nla_policy>())).maxlen as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nla_policy),
      "::",
      stringify!(maxlen)
    )
  );
}
extern "C" {
  pub fn nla_attr_size(payload: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_total_size(payload: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_padlen(payload: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_type(arg1: *const nlattr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_data(arg1: *const nlattr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nla_len(arg1: *const nlattr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_ok(arg1: *const nlattr, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_next(arg1: *const nlattr, arg2: *mut ::std::os::raw::c_int) -> *mut nlattr;
}
extern "C" {
  pub fn nla_parse(
    arg1: *mut *mut nlattr,
    arg2: ::std::os::raw::c_int,
    arg3: *mut nlattr,
    arg4: ::std::os::raw::c_int,
    arg5: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_validate(
    arg1: *const nlattr,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *const nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_find(
    arg1: *const nlattr,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> *mut nlattr;
}
extern "C" {
  pub fn nla_memcpy(
    arg1: *mut ::std::os::raw::c_void,
    arg2: *const nlattr,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_strlcpy(arg1: *mut ::std::os::raw::c_char, arg2: *const nlattr, arg3: usize) -> usize;
}
extern "C" {
  pub fn nla_memcmp(
    arg1: *const nlattr,
    arg2: *const ::std::os::raw::c_void,
    arg3: usize,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_strcmp(
    arg1: *const nlattr,
    arg2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_reserve(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> *mut nlattr;
}
extern "C" {
  pub fn nla_put(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *const ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_put_data(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: *const nl_data,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_put_addr(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: *mut nl_addr,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_s8(arg1: *const nlattr) -> i8;
}
extern "C" {
  pub fn nla_put_s8(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: i8,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_u8(arg1: *const nlattr) -> u8;
}
extern "C" {
  pub fn nla_put_u8(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: u8,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_s16(arg1: *const nlattr) -> i16;
}
extern "C" {
  pub fn nla_put_s16(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: i16,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_u16(arg1: *const nlattr) -> u16;
}
extern "C" {
  pub fn nla_put_u16(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: u16,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_s32(arg1: *const nlattr) -> i32;
}
extern "C" {
  pub fn nla_put_s32(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: i32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_u32(arg1: *const nlattr) -> u32;
}
extern "C" {
  pub fn nla_put_u32(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: u32,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_s64(arg1: *const nlattr) -> i64;
}
extern "C" {
  pub fn nla_put_s64(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: i64,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_u64(arg1: *const nlattr) -> u64;
}
extern "C" {
  pub fn nla_put_u64(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: u64,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_string(arg1: *const nlattr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nla_strdup(arg1: *const nlattr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nla_put_string(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_flag(arg1: *const nlattr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_put_flag(arg1: *mut nl_msg, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_get_msecs(arg1: *const nlattr) -> ::std::os::raw::c_ulong;
}
extern "C" {
  pub fn nla_put_msecs(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_ulong,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_put_nested(
    arg1: *mut nl_msg,
    arg2: ::std::os::raw::c_int,
    arg3: *const nl_msg,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_nest_start(arg1: *mut nl_msg, arg2: ::std::os::raw::c_int) -> *mut nlattr;
}
extern "C" {
  pub fn nla_nest_end(arg1: *mut nl_msg, arg2: *mut nlattr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_nest_cancel(arg1: *mut nl_msg, arg2: *const nlattr);
}
extern "C" {
  pub fn nla_parse_nested(
    arg1: *mut *mut nlattr,
    arg2: ::std::os::raw::c_int,
    arg3: *mut nlattr,
    arg4: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nla_is_nested(arg1: *const nlattr) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_tree {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nlmsg_size(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_total_size(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_padlen(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_data(arg1: *const nlmsghdr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nlmsg_datalen(arg1: *const nlmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_tail(arg1: *const nlmsghdr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nlmsg_attrdata(arg1: *const nlmsghdr, arg2: ::std::os::raw::c_int) -> *mut nlattr;
}
extern "C" {
  pub fn nlmsg_attrlen(arg1: *const nlmsghdr, arg2: ::std::os::raw::c_int)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_valid_hdr(
    arg1: *const nlmsghdr,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_ok(arg1: *const nlmsghdr, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_next(arg1: *mut nlmsghdr, arg2: *mut ::std::os::raw::c_int) -> *mut nlmsghdr;
}
extern "C" {
  pub fn nlmsg_parse(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
    arg3: *mut *mut nlattr,
    arg4: ::std::os::raw::c_int,
    arg5: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_find_attr(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> *mut nlattr;
}
extern "C" {
  pub fn nlmsg_validate(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_alloc() -> *mut nl_msg;
}
extern "C" {
  pub fn nlmsg_alloc_size(arg1: usize) -> *mut nl_msg;
}
extern "C" {
  pub fn nlmsg_alloc_simple(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
  ) -> *mut nl_msg;
}
extern "C" {
  pub fn nlmsg_set_default_size(arg1: usize);
}
extern "C" {
  pub fn nlmsg_inherit(arg1: *mut nlmsghdr) -> *mut nl_msg;
}
extern "C" {
  pub fn nlmsg_convert(arg1: *mut nlmsghdr) -> *mut nl_msg;
}
extern "C" {
  pub fn nlmsg_reserve(
    arg1: *mut nl_msg,
    arg2: usize,
    arg3: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn nlmsg_append(
    arg1: *mut nl_msg,
    arg2: *mut ::std::os::raw::c_void,
    arg3: usize,
    arg4: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_expand(arg1: *mut nl_msg, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_put(
    arg1: *mut nl_msg,
    arg2: u32,
    arg3: u32,
    arg4: ::std::os::raw::c_int,
    arg5: ::std::os::raw::c_int,
    arg6: ::std::os::raw::c_int,
  ) -> *mut nlmsghdr;
}
extern "C" {
  pub fn nlmsg_hdr(arg1: *mut nl_msg) -> *mut nlmsghdr;
}
extern "C" {
  pub fn nlmsg_get(arg1: *mut nl_msg);
}
extern "C" {
  pub fn nlmsg_free(arg1: *mut nl_msg);
}
extern "C" {
  pub fn nlmsg_set_proto(arg1: *mut nl_msg, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nlmsg_get_proto(arg1: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nlmsg_get_max_size(arg1: *mut nl_msg) -> usize;
}
extern "C" {
  pub fn nlmsg_set_src(arg1: *mut nl_msg, arg2: *mut sockaddr_nl);
}
extern "C" {
  pub fn nlmsg_get_src(arg1: *mut nl_msg) -> *mut sockaddr_nl;
}
extern "C" {
  pub fn nlmsg_set_dst(arg1: *mut nl_msg, arg2: *mut sockaddr_nl);
}
extern "C" {
  pub fn nlmsg_get_dst(arg1: *mut nl_msg) -> *mut sockaddr_nl;
}
extern "C" {
  pub fn nlmsg_set_creds(arg1: *mut nl_msg, arg2: *mut ucred);
}
extern "C" {
  pub fn nlmsg_get_creds(arg1: *mut nl_msg) -> *mut ucred;
}
extern "C" {
  pub fn nl_nlmsgtype2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_str2nlmsgtype(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_nlmsg_flags2str(
    arg1: ::std::os::raw::c_int,
    arg2: *mut ::std::os::raw::c_char,
    arg3: usize,
  ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn nl_msg_parse(
    arg1: *mut nl_msg,
    cb: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_object, arg2: *mut ::std::os::raw::c_void),
    >,
    arg2: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_msg_dump(arg1: *mut nl_msg, arg2: *mut FILE);
}
extern "C" {
  pub fn genl_connect(arg1: *mut nl_sock) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_send_simple(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: ::std::os::raw::c_int,
    arg5: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_put(
    arg1: *mut nl_msg,
    arg2: u32,
    arg3: u32,
    arg4: ::std::os::raw::c_int,
    arg5: ::std::os::raw::c_int,
    arg6: ::std::os::raw::c_int,
    arg7: u8,
    arg8: u8,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn genlmsg_valid_hdr(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_validate(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_parse(
    arg1: *mut nlmsghdr,
    arg2: ::std::os::raw::c_int,
    arg3: *mut *mut nlattr,
    arg4: ::std::os::raw::c_int,
    arg5: *mut nla_policy,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_hdr(arg1: *mut nlmsghdr) -> *mut genlmsghdr;
}
extern "C" {
  pub fn genlmsg_data(arg1: *const genlmsghdr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn genlmsg_user_hdr(arg1: *const genlmsghdr) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn genlmsg_user_data(
    arg1: *const genlmsghdr,
    arg2: ::std::os::raw::c_int,
  ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
  pub fn genlmsg_user_datalen(
    arg1: *const genlmsghdr,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_len(arg1: *const genlmsghdr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genlmsg_attrdata(arg1: *const genlmsghdr, arg2: ::std::os::raw::c_int) -> *mut nlattr;
}
extern "C" {
  pub fn genlmsg_attrlen(
    arg1: *const genlmsghdr,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_op2name(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
    arg3: *mut ::std::os::raw::c_char,
    arg4: usize,
  ) -> *mut ::std::os::raw::c_char;
}
pub const NL_ACT_UNSPEC: _bindgen_ty_69 = 0;
pub const NL_ACT_NEW: _bindgen_ty_69 = 1;
pub const NL_ACT_DEL: _bindgen_ty_69 = 2;
pub const NL_ACT_GET: _bindgen_ty_69 = 3;
pub const NL_ACT_SET: _bindgen_ty_69 = 4;
pub const NL_ACT_CHANGE: _bindgen_ty_69 = 5;
pub const __NL_ACT_MAX: _bindgen_ty_69 = 6;
pub type _bindgen_ty_69 = u32;
pub type change_func_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut nl_cache,
    arg2: *mut nl_object,
    arg3: ::std::os::raw::c_int,
    arg4: *mut ::std::os::raw::c_void,
  ),
>;
pub type change_func_v2_t = ::std::option::Option<
  unsafe extern "C" fn(
    arg1: *mut nl_cache,
    old_obj: *mut nl_object,
    new_obj: *mut nl_object,
    arg2: u64,
    arg3: ::std::os::raw::c_int,
    arg4: *mut ::std::os::raw::c_void,
  ),
>;
extern "C" {
  pub fn nl_cache_nitems(arg1: *mut nl_cache) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_nitems_filter(arg1: *mut nl_cache, arg2: *mut nl_object)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_get_ops(arg1: *mut nl_cache) -> *mut nl_cache_ops;
}
extern "C" {
  pub fn nl_cache_get_first(arg1: *mut nl_cache) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_get_last(arg1: *mut nl_cache) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_get_next(arg1: *mut nl_object) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_get_prev(arg1: *mut nl_object) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_alloc(arg1: *mut nl_cache_ops) -> *mut nl_cache;
}
extern "C" {
  pub fn nl_cache_alloc_and_fill(
    arg1: *mut nl_cache_ops,
    arg2: *mut nl_sock,
    arg3: *mut *mut nl_cache,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_alloc_name(
    arg1: *const ::std::os::raw::c_char,
    arg2: *mut *mut nl_cache,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_subset(arg1: *mut nl_cache, arg2: *mut nl_object) -> *mut nl_cache;
}
extern "C" {
  pub fn nl_cache_clone(arg1: *mut nl_cache) -> *mut nl_cache;
}
extern "C" {
  pub fn nl_cache_clear(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_get(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_free(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_put(cache: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_add(arg1: *mut nl_cache, arg2: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_parse_and_add(arg1: *mut nl_cache, arg2: *mut nl_msg) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_move(arg1: *mut nl_cache, arg2: *mut nl_object) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_remove(arg1: *mut nl_object);
}
extern "C" {
  pub fn nl_cache_refill(arg1: *mut nl_sock, arg2: *mut nl_cache) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_pickup(arg1: *mut nl_sock, arg2: *mut nl_cache) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_pickup_checkdup(arg1: *mut nl_sock, arg2: *mut nl_cache)
    -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_resync(
    arg1: *mut nl_sock,
    arg2: *mut nl_cache,
    arg3: change_func_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_include(
    arg1: *mut nl_cache,
    arg2: *mut nl_object,
    arg3: change_func_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_include_v2(
    arg1: *mut nl_cache,
    arg2: *mut nl_object,
    arg3: change_func_v2_t,
    arg4: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_set_arg1(arg1: *mut nl_cache, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nl_cache_set_arg2(arg1: *mut nl_cache, arg2: ::std::os::raw::c_int);
}
extern "C" {
  pub fn nl_cache_set_flags(arg1: *mut nl_cache, arg2: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn nl_cache_is_empty(arg1: *mut nl_cache) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_search(arg1: *mut nl_cache, arg2: *mut nl_object) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_find(arg1: *mut nl_cache, arg2: *mut nl_object) -> *mut nl_object;
}
extern "C" {
  pub fn nl_cache_mark_all(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_dump(arg1: *mut nl_cache, arg2: *mut nl_dump_params);
}
extern "C" {
  pub fn nl_cache_dump_filter(arg1: *mut nl_cache, arg2: *mut nl_dump_params, arg3: *mut nl_object);
}
extern "C" {
  pub fn nl_cache_foreach(
    arg1: *mut nl_cache,
    cb: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_object, arg2: *mut ::std::os::raw::c_void),
    >,
    arg: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn nl_cache_foreach_filter(
    arg1: *mut nl_cache,
    arg2: *mut nl_object,
    cb: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_object, arg2: *mut ::std::os::raw::c_void),
    >,
    arg: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn nl_cache_ops_lookup(arg1: *const ::std::os::raw::c_char) -> *mut nl_cache_ops;
}
extern "C" {
  pub fn nl_cache_ops_lookup_safe(arg1: *const ::std::os::raw::c_char) -> *mut nl_cache_ops;
}
extern "C" {
  pub fn nl_cache_ops_associate(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
  ) -> *mut nl_cache_ops;
}
extern "C" {
  pub fn nl_cache_ops_associate_safe(
    arg1: ::std::os::raw::c_int,
    arg2: ::std::os::raw::c_int,
  ) -> *mut nl_cache_ops;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_msgtype {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nl_msgtype_lookup(arg1: *mut nl_cache_ops, arg2: ::std::os::raw::c_int)
    -> *mut nl_msgtype;
}
extern "C" {
  pub fn nl_cache_ops_foreach(
    cb: ::std::option::Option<
      unsafe extern "C" fn(arg1: *mut nl_cache_ops, arg2: *mut ::std::os::raw::c_void),
    >,
    arg1: *mut ::std::os::raw::c_void,
  );
}
extern "C" {
  pub fn nl_cache_mngt_register(arg1: *mut nl_cache_ops) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngt_unregister(arg1: *mut nl_cache_ops) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngt_provide(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_mngt_unprovide(arg1: *mut nl_cache);
}
extern "C" {
  pub fn nl_cache_mngt_require(arg1: *const ::std::os::raw::c_char) -> *mut nl_cache;
}
extern "C" {
  pub fn nl_cache_mngt_require_safe(arg1: *const ::std::os::raw::c_char) -> *mut nl_cache;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_cache_mngr {
  _unused: [u8; 0],
}
extern "C" {
  pub fn nl_cache_mngr_alloc(
    arg1: *mut nl_sock,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
    arg4: *mut *mut nl_cache_mngr,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_add(
    arg1: *mut nl_cache_mngr,
    arg2: *const ::std::os::raw::c_char,
    arg3: change_func_t,
    arg4: *mut ::std::os::raw::c_void,
    arg5: *mut *mut nl_cache,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_add_cache(
    mngr: *mut nl_cache_mngr,
    cache: *mut nl_cache,
    cb: change_func_t,
    data: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_add_cache_v2(
    mngr: *mut nl_cache_mngr,
    cache: *mut nl_cache,
    cb: change_func_v2_t,
    data: *mut ::std::os::raw::c_void,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_get_fd(arg1: *mut nl_cache_mngr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_poll(
    arg1: *mut nl_cache_mngr,
    arg2: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_data_ready(arg1: *mut nl_cache_mngr) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn nl_cache_mngr_info(arg1: *mut nl_cache_mngr, arg2: *mut nl_dump_params);
}
extern "C" {
  pub fn nl_cache_mngr_free(arg1: *mut nl_cache_mngr);
}
extern "C" {
  pub fn nl_cache_ops_get(arg1: *mut nl_cache_ops);
}
extern "C" {
  pub fn nl_cache_ops_put(arg1: *mut nl_cache_ops);
}
extern "C" {
  pub fn nl_cache_ops_set_flags(arg1: *mut nl_cache_ops, arg2: ::std::os::raw::c_uint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct genl_family {
  _unused: [u8; 0],
}
extern "C" {
  pub fn genl_family_alloc() -> *mut genl_family;
}
extern "C" {
  pub fn genl_family_put(arg1: *mut genl_family);
}
extern "C" {
  pub fn genl_family_get_id(arg1: *mut genl_family) -> ::std::os::raw::c_uint;
}
extern "C" {
  pub fn genl_family_set_id(arg1: *mut genl_family, arg2: ::std::os::raw::c_uint);
}
extern "C" {
  pub fn genl_family_get_name(arg1: *mut genl_family) -> *mut ::std::os::raw::c_char;
}
extern "C" {
  pub fn genl_family_set_name(arg1: *mut genl_family, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
  pub fn genl_family_get_version(arg1: *mut genl_family) -> u8;
}
extern "C" {
  pub fn genl_family_set_version(arg1: *mut genl_family, arg2: u8);
}
extern "C" {
  pub fn genl_family_get_hdrsize(arg1: *mut genl_family) -> u32;
}
extern "C" {
  pub fn genl_family_set_hdrsize(arg1: *mut genl_family, arg2: u32);
}
extern "C" {
  pub fn genl_family_get_maxattr(arg1: *mut genl_family) -> u32;
}
extern "C" {
  pub fn genl_family_set_maxattr(arg1: *mut genl_family, arg2: u32);
}
extern "C" {
  pub fn genl_family_add_op(
    arg1: *mut genl_family,
    arg2: ::std::os::raw::c_int,
    arg3: ::std::os::raw::c_int,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_family_add_grp(
    arg1: *mut genl_family,
    arg2: u32,
    arg3: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_ctrl_alloc_cache(
    arg1: *mut nl_sock,
    arg2: *mut *mut nl_cache,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_ctrl_search(arg1: *mut nl_cache, arg2: ::std::os::raw::c_int) -> *mut genl_family;
}
extern "C" {
  pub fn genl_ctrl_search_by_name(
    arg1: *mut nl_cache,
    arg2: *const ::std::os::raw::c_char,
  ) -> *mut genl_family;
}
extern "C" {
  pub fn genl_ctrl_resolve(
    arg1: *mut nl_sock,
    arg2: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn genl_ctrl_resolve_grp(
    sk: *mut nl_sock,
    family: *const ::std::os::raw::c_char,
    grp: *const ::std::os::raw::c_char,
  ) -> ::std::os::raw::c_int;
}
extern "C" {
  pub fn if_nametoindex(__ifname: *const ::std::os::raw::c_char) -> ::std::os::raw::c_uint;
}
pub const nl80211_commands_NL80211_CMD_UNSPEC: nl80211_commands = 0;
pub const nl80211_commands_NL80211_CMD_GET_WIPHY: nl80211_commands = 1;
pub const nl80211_commands_NL80211_CMD_SET_WIPHY: nl80211_commands = 2;
pub const nl80211_commands_NL80211_CMD_NEW_WIPHY: nl80211_commands = 3;
pub const nl80211_commands_NL80211_CMD_DEL_WIPHY: nl80211_commands = 4;
pub const nl80211_commands_NL80211_CMD_GET_INTERFACE: nl80211_commands = 5;
pub const nl80211_commands_NL80211_CMD_SET_INTERFACE: nl80211_commands = 6;
pub const nl80211_commands_NL80211_CMD_NEW_INTERFACE: nl80211_commands = 7;
pub const nl80211_commands_NL80211_CMD_DEL_INTERFACE: nl80211_commands = 8;
pub const nl80211_commands_NL80211_CMD_GET_KEY: nl80211_commands = 9;
pub const nl80211_commands_NL80211_CMD_SET_KEY: nl80211_commands = 10;
pub const nl80211_commands_NL80211_CMD_NEW_KEY: nl80211_commands = 11;
pub const nl80211_commands_NL80211_CMD_DEL_KEY: nl80211_commands = 12;
pub const nl80211_commands_NL80211_CMD_GET_BEACON: nl80211_commands = 13;
pub const nl80211_commands_NL80211_CMD_SET_BEACON: nl80211_commands = 14;
pub const nl80211_commands_NL80211_CMD_START_AP: nl80211_commands = 15;
pub const nl80211_commands_NL80211_CMD_NEW_BEACON: nl80211_commands = 15;
pub const nl80211_commands_NL80211_CMD_STOP_AP: nl80211_commands = 16;
pub const nl80211_commands_NL80211_CMD_DEL_BEACON: nl80211_commands = 16;
pub const nl80211_commands_NL80211_CMD_GET_STATION: nl80211_commands = 17;
pub const nl80211_commands_NL80211_CMD_SET_STATION: nl80211_commands = 18;
pub const nl80211_commands_NL80211_CMD_NEW_STATION: nl80211_commands = 19;
pub const nl80211_commands_NL80211_CMD_DEL_STATION: nl80211_commands = 20;
pub const nl80211_commands_NL80211_CMD_GET_MPATH: nl80211_commands = 21;
pub const nl80211_commands_NL80211_CMD_SET_MPATH: nl80211_commands = 22;
pub const nl80211_commands_NL80211_CMD_NEW_MPATH: nl80211_commands = 23;
pub const nl80211_commands_NL80211_CMD_DEL_MPATH: nl80211_commands = 24;
pub const nl80211_commands_NL80211_CMD_SET_BSS: nl80211_commands = 25;
pub const nl80211_commands_NL80211_CMD_SET_REG: nl80211_commands = 26;
pub const nl80211_commands_NL80211_CMD_REQ_SET_REG: nl80211_commands = 27;
pub const nl80211_commands_NL80211_CMD_GET_MESH_CONFIG: nl80211_commands = 28;
pub const nl80211_commands_NL80211_CMD_SET_MESH_CONFIG: nl80211_commands = 29;
pub const nl80211_commands_NL80211_CMD_SET_MGMT_EXTRA_IE: nl80211_commands = 30;
pub const nl80211_commands_NL80211_CMD_GET_REG: nl80211_commands = 31;
pub const nl80211_commands_NL80211_CMD_GET_SCAN: nl80211_commands = 32;
pub const nl80211_commands_NL80211_CMD_TRIGGER_SCAN: nl80211_commands = 33;
pub const nl80211_commands_NL80211_CMD_NEW_SCAN_RESULTS: nl80211_commands = 34;
pub const nl80211_commands_NL80211_CMD_SCAN_ABORTED: nl80211_commands = 35;
pub const nl80211_commands_NL80211_CMD_REG_CHANGE: nl80211_commands = 36;
pub const nl80211_commands_NL80211_CMD_AUTHENTICATE: nl80211_commands = 37;
pub const nl80211_commands_NL80211_CMD_ASSOCIATE: nl80211_commands = 38;
pub const nl80211_commands_NL80211_CMD_DEAUTHENTICATE: nl80211_commands = 39;
pub const nl80211_commands_NL80211_CMD_DISASSOCIATE: nl80211_commands = 40;
pub const nl80211_commands_NL80211_CMD_MICHAEL_MIC_FAILURE: nl80211_commands = 41;
pub const nl80211_commands_NL80211_CMD_REG_BEACON_HINT: nl80211_commands = 42;
pub const nl80211_commands_NL80211_CMD_JOIN_IBSS: nl80211_commands = 43;
pub const nl80211_commands_NL80211_CMD_LEAVE_IBSS: nl80211_commands = 44;
pub const nl80211_commands_NL80211_CMD_TESTMODE: nl80211_commands = 45;
pub const nl80211_commands_NL80211_CMD_CONNECT: nl80211_commands = 46;
pub const nl80211_commands_NL80211_CMD_ROAM: nl80211_commands = 47;
pub const nl80211_commands_NL80211_CMD_DISCONNECT: nl80211_commands = 48;
pub const nl80211_commands_NL80211_CMD_SET_WIPHY_NETNS: nl80211_commands = 49;
pub const nl80211_commands_NL80211_CMD_GET_SURVEY: nl80211_commands = 50;
pub const nl80211_commands_NL80211_CMD_NEW_SURVEY_RESULTS: nl80211_commands = 51;
pub const nl80211_commands_NL80211_CMD_SET_PMKSA: nl80211_commands = 52;
pub const nl80211_commands_NL80211_CMD_DEL_PMKSA: nl80211_commands = 53;
pub const nl80211_commands_NL80211_CMD_FLUSH_PMKSA: nl80211_commands = 54;
pub const nl80211_commands_NL80211_CMD_REMAIN_ON_CHANNEL: nl80211_commands = 55;
pub const nl80211_commands_NL80211_CMD_CANCEL_REMAIN_ON_CHANNEL: nl80211_commands = 56;
pub const nl80211_commands_NL80211_CMD_SET_TX_BITRATE_MASK: nl80211_commands = 57;
pub const nl80211_commands_NL80211_CMD_REGISTER_FRAME: nl80211_commands = 58;
pub const nl80211_commands_NL80211_CMD_REGISTER_ACTION: nl80211_commands = 58;
pub const nl80211_commands_NL80211_CMD_FRAME: nl80211_commands = 59;
pub const nl80211_commands_NL80211_CMD_ACTION: nl80211_commands = 59;
pub const nl80211_commands_NL80211_CMD_FRAME_TX_STATUS: nl80211_commands = 60;
pub const nl80211_commands_NL80211_CMD_ACTION_TX_STATUS: nl80211_commands = 60;
pub const nl80211_commands_NL80211_CMD_SET_POWER_SAVE: nl80211_commands = 61;
pub const nl80211_commands_NL80211_CMD_GET_POWER_SAVE: nl80211_commands = 62;
pub const nl80211_commands_NL80211_CMD_SET_CQM: nl80211_commands = 63;
pub const nl80211_commands_NL80211_CMD_NOTIFY_CQM: nl80211_commands = 64;
pub const nl80211_commands_NL80211_CMD_SET_CHANNEL: nl80211_commands = 65;
pub const nl80211_commands_NL80211_CMD_SET_WDS_PEER: nl80211_commands = 66;
pub const nl80211_commands_NL80211_CMD_FRAME_WAIT_CANCEL: nl80211_commands = 67;
pub const nl80211_commands_NL80211_CMD_JOIN_MESH: nl80211_commands = 68;
pub const nl80211_commands_NL80211_CMD_LEAVE_MESH: nl80211_commands = 69;
pub const nl80211_commands_NL80211_CMD_UNPROT_DEAUTHENTICATE: nl80211_commands = 70;
pub const nl80211_commands_NL80211_CMD_UNPROT_DISASSOCIATE: nl80211_commands = 71;
pub const nl80211_commands_NL80211_CMD_NEW_PEER_CANDIDATE: nl80211_commands = 72;
pub const nl80211_commands_NL80211_CMD_GET_WOWLAN: nl80211_commands = 73;
pub const nl80211_commands_NL80211_CMD_SET_WOWLAN: nl80211_commands = 74;
pub const nl80211_commands_NL80211_CMD_START_SCHED_SCAN: nl80211_commands = 75;
pub const nl80211_commands_NL80211_CMD_STOP_SCHED_SCAN: nl80211_commands = 76;
pub const nl80211_commands_NL80211_CMD_SCHED_SCAN_RESULTS: nl80211_commands = 77;
pub const nl80211_commands_NL80211_CMD_SCHED_SCAN_STOPPED: nl80211_commands = 78;
pub const nl80211_commands_NL80211_CMD_SET_REKEY_OFFLOAD: nl80211_commands = 79;
pub const nl80211_commands_NL80211_CMD_PMKSA_CANDIDATE: nl80211_commands = 80;
pub const nl80211_commands_NL80211_CMD_TDLS_OPER: nl80211_commands = 81;
pub const nl80211_commands_NL80211_CMD_TDLS_MGMT: nl80211_commands = 82;
pub const nl80211_commands_NL80211_CMD_UNEXPECTED_FRAME: nl80211_commands = 83;
pub const nl80211_commands_NL80211_CMD_PROBE_CLIENT: nl80211_commands = 84;
pub const nl80211_commands_NL80211_CMD_REGISTER_BEACONS: nl80211_commands = 85;
pub const nl80211_commands_NL80211_CMD_UNEXPECTED_4ADDR_FRAME: nl80211_commands = 86;
pub const nl80211_commands_NL80211_CMD_SET_NOACK_MAP: nl80211_commands = 87;
pub const nl80211_commands_NL80211_CMD_CH_SWITCH_NOTIFY: nl80211_commands = 88;
pub const nl80211_commands_NL80211_CMD_START_P2P_DEVICE: nl80211_commands = 89;
pub const nl80211_commands_NL80211_CMD_STOP_P2P_DEVICE: nl80211_commands = 90;
pub const nl80211_commands_NL80211_CMD_CONN_FAILED: nl80211_commands = 91;
pub const nl80211_commands_NL80211_CMD_SET_MCAST_RATE: nl80211_commands = 92;
pub const nl80211_commands_NL80211_CMD_SET_MAC_ACL: nl80211_commands = 93;
pub const nl80211_commands_NL80211_CMD_RADAR_DETECT: nl80211_commands = 94;
pub const nl80211_commands_NL80211_CMD_GET_PROTOCOL_FEATURES: nl80211_commands = 95;
pub const nl80211_commands_NL80211_CMD_UPDATE_FT_IES: nl80211_commands = 96;
pub const nl80211_commands_NL80211_CMD_FT_EVENT: nl80211_commands = 97;
pub const nl80211_commands_NL80211_CMD_CRIT_PROTOCOL_START: nl80211_commands = 98;
pub const nl80211_commands_NL80211_CMD_CRIT_PROTOCOL_STOP: nl80211_commands = 99;
pub const nl80211_commands_NL80211_CMD_GET_COALESCE: nl80211_commands = 100;
pub const nl80211_commands_NL80211_CMD_SET_COALESCE: nl80211_commands = 101;
pub const nl80211_commands_NL80211_CMD_CHANNEL_SWITCH: nl80211_commands = 102;
pub const nl80211_commands_NL80211_CMD_VENDOR: nl80211_commands = 103;
pub const nl80211_commands_NL80211_CMD_SET_QOS_MAP: nl80211_commands = 104;
pub const nl80211_commands_NL80211_CMD_ADD_TX_TS: nl80211_commands = 105;
pub const nl80211_commands_NL80211_CMD_DEL_TX_TS: nl80211_commands = 106;
pub const nl80211_commands_NL80211_CMD_GET_MPP: nl80211_commands = 107;
pub const nl80211_commands_NL80211_CMD_JOIN_OCB: nl80211_commands = 108;
pub const nl80211_commands_NL80211_CMD_LEAVE_OCB: nl80211_commands = 109;
pub const nl80211_commands_NL80211_CMD_CH_SWITCH_STARTED_NOTIFY: nl80211_commands = 110;
pub const nl80211_commands_NL80211_CMD_TDLS_CHANNEL_SWITCH: nl80211_commands = 111;
pub const nl80211_commands_NL80211_CMD_TDLS_CANCEL_CHANNEL_SWITCH: nl80211_commands = 112;
pub const nl80211_commands_NL80211_CMD_WIPHY_REG_CHANGE: nl80211_commands = 113;
pub const nl80211_commands_NL80211_CMD_ABORT_SCAN: nl80211_commands = 114;
pub const nl80211_commands_NL80211_CMD_START_NAN: nl80211_commands = 115;
pub const nl80211_commands_NL80211_CMD_STOP_NAN: nl80211_commands = 116;
pub const nl80211_commands_NL80211_CMD_ADD_NAN_FUNCTION: nl80211_commands = 117;
pub const nl80211_commands_NL80211_CMD_DEL_NAN_FUNCTION: nl80211_commands = 118;
pub const nl80211_commands_NL80211_CMD_CHANGE_NAN_CONFIG: nl80211_commands = 119;
pub const nl80211_commands_NL80211_CMD_NAN_MATCH: nl80211_commands = 120;
pub const nl80211_commands_NL80211_CMD_SET_MULTICAST_TO_UNICAST: nl80211_commands = 121;
pub const nl80211_commands_NL80211_CMD_UPDATE_CONNECT_PARAMS: nl80211_commands = 122;
pub const nl80211_commands_NL80211_CMD_SET_PMK: nl80211_commands = 123;
pub const nl80211_commands_NL80211_CMD_DEL_PMK: nl80211_commands = 124;
pub const nl80211_commands_NL80211_CMD_PORT_AUTHORIZED: nl80211_commands = 125;
pub const nl80211_commands_NL80211_CMD_RELOAD_REGDB: nl80211_commands = 126;
pub const nl80211_commands_NL80211_CMD_EXTERNAL_AUTH: nl80211_commands = 127;
pub const nl80211_commands_NL80211_CMD_STA_OPMODE_CHANGED: nl80211_commands = 128;
pub const nl80211_commands_NL80211_CMD_CONTROL_PORT_FRAME: nl80211_commands = 129;
pub const nl80211_commands___NL80211_CMD_AFTER_LAST: nl80211_commands = 130;
pub const nl80211_commands_NL80211_CMD_MAX: nl80211_commands = 129;
pub type nl80211_commands = u32;
pub const nl80211_attrs_NL80211_ATTR_UNSPEC: nl80211_attrs = 0;
pub const nl80211_attrs_NL80211_ATTR_WIPHY: nl80211_attrs = 1;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_NAME: nl80211_attrs = 2;
pub const nl80211_attrs_NL80211_ATTR_IFINDEX: nl80211_attrs = 3;
pub const nl80211_attrs_NL80211_ATTR_IFNAME: nl80211_attrs = 4;
pub const nl80211_attrs_NL80211_ATTR_IFTYPE: nl80211_attrs = 5;
pub const nl80211_attrs_NL80211_ATTR_MAC: nl80211_attrs = 6;
pub const nl80211_attrs_NL80211_ATTR_KEY_DATA: nl80211_attrs = 7;
pub const nl80211_attrs_NL80211_ATTR_KEY_IDX: nl80211_attrs = 8;
pub const nl80211_attrs_NL80211_ATTR_KEY_CIPHER: nl80211_attrs = 9;
pub const nl80211_attrs_NL80211_ATTR_KEY_SEQ: nl80211_attrs = 10;
pub const nl80211_attrs_NL80211_ATTR_KEY_DEFAULT: nl80211_attrs = 11;
pub const nl80211_attrs_NL80211_ATTR_BEACON_INTERVAL: nl80211_attrs = 12;
pub const nl80211_attrs_NL80211_ATTR_DTIM_PERIOD: nl80211_attrs = 13;
pub const nl80211_attrs_NL80211_ATTR_BEACON_HEAD: nl80211_attrs = 14;
pub const nl80211_attrs_NL80211_ATTR_BEACON_TAIL: nl80211_attrs = 15;
pub const nl80211_attrs_NL80211_ATTR_STA_AID: nl80211_attrs = 16;
pub const nl80211_attrs_NL80211_ATTR_STA_FLAGS: nl80211_attrs = 17;
pub const nl80211_attrs_NL80211_ATTR_STA_LISTEN_INTERVAL: nl80211_attrs = 18;
pub const nl80211_attrs_NL80211_ATTR_STA_SUPPORTED_RATES: nl80211_attrs = 19;
pub const nl80211_attrs_NL80211_ATTR_STA_VLAN: nl80211_attrs = 20;
pub const nl80211_attrs_NL80211_ATTR_STA_INFO: nl80211_attrs = 21;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_BANDS: nl80211_attrs = 22;
pub const nl80211_attrs_NL80211_ATTR_MNTR_FLAGS: nl80211_attrs = 23;
pub const nl80211_attrs_NL80211_ATTR_MESH_ID: nl80211_attrs = 24;
pub const nl80211_attrs_NL80211_ATTR_STA_PLINK_ACTION: nl80211_attrs = 25;
pub const nl80211_attrs_NL80211_ATTR_MPATH_NEXT_HOP: nl80211_attrs = 26;
pub const nl80211_attrs_NL80211_ATTR_MPATH_INFO: nl80211_attrs = 27;
pub const nl80211_attrs_NL80211_ATTR_BSS_CTS_PROT: nl80211_attrs = 28;
pub const nl80211_attrs_NL80211_ATTR_BSS_SHORT_PREAMBLE: nl80211_attrs = 29;
pub const nl80211_attrs_NL80211_ATTR_BSS_SHORT_SLOT_TIME: nl80211_attrs = 30;
pub const nl80211_attrs_NL80211_ATTR_HT_CAPABILITY: nl80211_attrs = 31;
pub const nl80211_attrs_NL80211_ATTR_SUPPORTED_IFTYPES: nl80211_attrs = 32;
pub const nl80211_attrs_NL80211_ATTR_REG_ALPHA2: nl80211_attrs = 33;
pub const nl80211_attrs_NL80211_ATTR_REG_RULES: nl80211_attrs = 34;
pub const nl80211_attrs_NL80211_ATTR_MESH_CONFIG: nl80211_attrs = 35;
pub const nl80211_attrs_NL80211_ATTR_BSS_BASIC_RATES: nl80211_attrs = 36;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_TXQ_PARAMS: nl80211_attrs = 37;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_FREQ: nl80211_attrs = 38;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_CHANNEL_TYPE: nl80211_attrs = 39;
pub const nl80211_attrs_NL80211_ATTR_KEY_DEFAULT_MGMT: nl80211_attrs = 40;
pub const nl80211_attrs_NL80211_ATTR_MGMT_SUBTYPE: nl80211_attrs = 41;
pub const nl80211_attrs_NL80211_ATTR_IE: nl80211_attrs = 42;
pub const nl80211_attrs_NL80211_ATTR_MAX_NUM_SCAN_SSIDS: nl80211_attrs = 43;
pub const nl80211_attrs_NL80211_ATTR_SCAN_FREQUENCIES: nl80211_attrs = 44;
pub const nl80211_attrs_NL80211_ATTR_SCAN_SSIDS: nl80211_attrs = 45;
pub const nl80211_attrs_NL80211_ATTR_GENERATION: nl80211_attrs = 46;
pub const nl80211_attrs_NL80211_ATTR_BSS: nl80211_attrs = 47;
pub const nl80211_attrs_NL80211_ATTR_REG_INITIATOR: nl80211_attrs = 48;
pub const nl80211_attrs_NL80211_ATTR_REG_TYPE: nl80211_attrs = 49;
pub const nl80211_attrs_NL80211_ATTR_SUPPORTED_COMMANDS: nl80211_attrs = 50;
pub const nl80211_attrs_NL80211_ATTR_FRAME: nl80211_attrs = 51;
pub const nl80211_attrs_NL80211_ATTR_SSID: nl80211_attrs = 52;
pub const nl80211_attrs_NL80211_ATTR_AUTH_TYPE: nl80211_attrs = 53;
pub const nl80211_attrs_NL80211_ATTR_REASON_CODE: nl80211_attrs = 54;
pub const nl80211_attrs_NL80211_ATTR_KEY_TYPE: nl80211_attrs = 55;
pub const nl80211_attrs_NL80211_ATTR_MAX_SCAN_IE_LEN: nl80211_attrs = 56;
pub const nl80211_attrs_NL80211_ATTR_CIPHER_SUITES: nl80211_attrs = 57;
pub const nl80211_attrs_NL80211_ATTR_FREQ_BEFORE: nl80211_attrs = 58;
pub const nl80211_attrs_NL80211_ATTR_FREQ_AFTER: nl80211_attrs = 59;
pub const nl80211_attrs_NL80211_ATTR_FREQ_FIXED: nl80211_attrs = 60;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_RETRY_SHORT: nl80211_attrs = 61;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_RETRY_LONG: nl80211_attrs = 62;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_FRAG_THRESHOLD: nl80211_attrs = 63;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_RTS_THRESHOLD: nl80211_attrs = 64;
pub const nl80211_attrs_NL80211_ATTR_TIMED_OUT: nl80211_attrs = 65;
pub const nl80211_attrs_NL80211_ATTR_USE_MFP: nl80211_attrs = 66;
pub const nl80211_attrs_NL80211_ATTR_STA_FLAGS2: nl80211_attrs = 67;
pub const nl80211_attrs_NL80211_ATTR_CONTROL_PORT: nl80211_attrs = 68;
pub const nl80211_attrs_NL80211_ATTR_TESTDATA: nl80211_attrs = 69;
pub const nl80211_attrs_NL80211_ATTR_PRIVACY: nl80211_attrs = 70;
pub const nl80211_attrs_NL80211_ATTR_DISCONNECTED_BY_AP: nl80211_attrs = 71;
pub const nl80211_attrs_NL80211_ATTR_STATUS_CODE: nl80211_attrs = 72;
pub const nl80211_attrs_NL80211_ATTR_CIPHER_SUITES_PAIRWISE: nl80211_attrs = 73;
pub const nl80211_attrs_NL80211_ATTR_CIPHER_SUITE_GROUP: nl80211_attrs = 74;
pub const nl80211_attrs_NL80211_ATTR_WPA_VERSIONS: nl80211_attrs = 75;
pub const nl80211_attrs_NL80211_ATTR_AKM_SUITES: nl80211_attrs = 76;
pub const nl80211_attrs_NL80211_ATTR_REQ_IE: nl80211_attrs = 77;
pub const nl80211_attrs_NL80211_ATTR_RESP_IE: nl80211_attrs = 78;
pub const nl80211_attrs_NL80211_ATTR_PREV_BSSID: nl80211_attrs = 79;
pub const nl80211_attrs_NL80211_ATTR_KEY: nl80211_attrs = 80;
pub const nl80211_attrs_NL80211_ATTR_KEYS: nl80211_attrs = 81;
pub const nl80211_attrs_NL80211_ATTR_PID: nl80211_attrs = 82;
pub const nl80211_attrs_NL80211_ATTR_4ADDR: nl80211_attrs = 83;
pub const nl80211_attrs_NL80211_ATTR_SURVEY_INFO: nl80211_attrs = 84;
pub const nl80211_attrs_NL80211_ATTR_PMKID: nl80211_attrs = 85;
pub const nl80211_attrs_NL80211_ATTR_MAX_NUM_PMKIDS: nl80211_attrs = 86;
pub const nl80211_attrs_NL80211_ATTR_DURATION: nl80211_attrs = 87;
pub const nl80211_attrs_NL80211_ATTR_COOKIE: nl80211_attrs = 88;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_COVERAGE_CLASS: nl80211_attrs = 89;
pub const nl80211_attrs_NL80211_ATTR_TX_RATES: nl80211_attrs = 90;
pub const nl80211_attrs_NL80211_ATTR_FRAME_MATCH: nl80211_attrs = 91;
pub const nl80211_attrs_NL80211_ATTR_ACK: nl80211_attrs = 92;
pub const nl80211_attrs_NL80211_ATTR_PS_STATE: nl80211_attrs = 93;
pub const nl80211_attrs_NL80211_ATTR_CQM: nl80211_attrs = 94;
pub const nl80211_attrs_NL80211_ATTR_LOCAL_STATE_CHANGE: nl80211_attrs = 95;
pub const nl80211_attrs_NL80211_ATTR_AP_ISOLATE: nl80211_attrs = 96;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_TX_POWER_SETTING: nl80211_attrs = 97;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_TX_POWER_LEVEL: nl80211_attrs = 98;
pub const nl80211_attrs_NL80211_ATTR_TX_FRAME_TYPES: nl80211_attrs = 99;
pub const nl80211_attrs_NL80211_ATTR_RX_FRAME_TYPES: nl80211_attrs = 100;
pub const nl80211_attrs_NL80211_ATTR_FRAME_TYPE: nl80211_attrs = 101;
pub const nl80211_attrs_NL80211_ATTR_CONTROL_PORT_ETHERTYPE: nl80211_attrs = 102;
pub const nl80211_attrs_NL80211_ATTR_CONTROL_PORT_NO_ENCRYPT: nl80211_attrs = 103;
pub const nl80211_attrs_NL80211_ATTR_SUPPORT_IBSS_RSN: nl80211_attrs = 104;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_ANTENNA_TX: nl80211_attrs = 105;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_ANTENNA_RX: nl80211_attrs = 106;
pub const nl80211_attrs_NL80211_ATTR_MCAST_RATE: nl80211_attrs = 107;
pub const nl80211_attrs_NL80211_ATTR_OFFCHANNEL_TX_OK: nl80211_attrs = 108;
pub const nl80211_attrs_NL80211_ATTR_BSS_HT_OPMODE: nl80211_attrs = 109;
pub const nl80211_attrs_NL80211_ATTR_KEY_DEFAULT_TYPES: nl80211_attrs = 110;
pub const nl80211_attrs_NL80211_ATTR_MAX_REMAIN_ON_CHANNEL_DURATION: nl80211_attrs = 111;
pub const nl80211_attrs_NL80211_ATTR_MESH_SETUP: nl80211_attrs = 112;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_ANTENNA_AVAIL_TX: nl80211_attrs = 113;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_ANTENNA_AVAIL_RX: nl80211_attrs = 114;
pub const nl80211_attrs_NL80211_ATTR_SUPPORT_MESH_AUTH: nl80211_attrs = 115;
pub const nl80211_attrs_NL80211_ATTR_STA_PLINK_STATE: nl80211_attrs = 116;
pub const nl80211_attrs_NL80211_ATTR_WOWLAN_TRIGGERS: nl80211_attrs = 117;
pub const nl80211_attrs_NL80211_ATTR_WOWLAN_TRIGGERS_SUPPORTED: nl80211_attrs = 118;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_INTERVAL: nl80211_attrs = 119;
pub const nl80211_attrs_NL80211_ATTR_INTERFACE_COMBINATIONS: nl80211_attrs = 120;
pub const nl80211_attrs_NL80211_ATTR_SOFTWARE_IFTYPES: nl80211_attrs = 121;
pub const nl80211_attrs_NL80211_ATTR_REKEY_DATA: nl80211_attrs = 122;
pub const nl80211_attrs_NL80211_ATTR_MAX_NUM_SCHED_SCAN_SSIDS: nl80211_attrs = 123;
pub const nl80211_attrs_NL80211_ATTR_MAX_SCHED_SCAN_IE_LEN: nl80211_attrs = 124;
pub const nl80211_attrs_NL80211_ATTR_SCAN_SUPP_RATES: nl80211_attrs = 125;
pub const nl80211_attrs_NL80211_ATTR_HIDDEN_SSID: nl80211_attrs = 126;
pub const nl80211_attrs_NL80211_ATTR_IE_PROBE_RESP: nl80211_attrs = 127;
pub const nl80211_attrs_NL80211_ATTR_IE_ASSOC_RESP: nl80211_attrs = 128;
pub const nl80211_attrs_NL80211_ATTR_STA_WME: nl80211_attrs = 129;
pub const nl80211_attrs_NL80211_ATTR_SUPPORT_AP_UAPSD: nl80211_attrs = 130;
pub const nl80211_attrs_NL80211_ATTR_ROAM_SUPPORT: nl80211_attrs = 131;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_MATCH: nl80211_attrs = 132;
pub const nl80211_attrs_NL80211_ATTR_MAX_MATCH_SETS: nl80211_attrs = 133;
pub const nl80211_attrs_NL80211_ATTR_PMKSA_CANDIDATE: nl80211_attrs = 134;
pub const nl80211_attrs_NL80211_ATTR_TX_NO_CCK_RATE: nl80211_attrs = 135;
pub const nl80211_attrs_NL80211_ATTR_TDLS_ACTION: nl80211_attrs = 136;
pub const nl80211_attrs_NL80211_ATTR_TDLS_DIALOG_TOKEN: nl80211_attrs = 137;
pub const nl80211_attrs_NL80211_ATTR_TDLS_OPERATION: nl80211_attrs = 138;
pub const nl80211_attrs_NL80211_ATTR_TDLS_SUPPORT: nl80211_attrs = 139;
pub const nl80211_attrs_NL80211_ATTR_TDLS_EXTERNAL_SETUP: nl80211_attrs = 140;
pub const nl80211_attrs_NL80211_ATTR_DEVICE_AP_SME: nl80211_attrs = 141;
pub const nl80211_attrs_NL80211_ATTR_DONT_WAIT_FOR_ACK: nl80211_attrs = 142;
pub const nl80211_attrs_NL80211_ATTR_FEATURE_FLAGS: nl80211_attrs = 143;
pub const nl80211_attrs_NL80211_ATTR_PROBE_RESP_OFFLOAD: nl80211_attrs = 144;
pub const nl80211_attrs_NL80211_ATTR_PROBE_RESP: nl80211_attrs = 145;
pub const nl80211_attrs_NL80211_ATTR_DFS_REGION: nl80211_attrs = 146;
pub const nl80211_attrs_NL80211_ATTR_DISABLE_HT: nl80211_attrs = 147;
pub const nl80211_attrs_NL80211_ATTR_HT_CAPABILITY_MASK: nl80211_attrs = 148;
pub const nl80211_attrs_NL80211_ATTR_NOACK_MAP: nl80211_attrs = 149;
pub const nl80211_attrs_NL80211_ATTR_INACTIVITY_TIMEOUT: nl80211_attrs = 150;
pub const nl80211_attrs_NL80211_ATTR_RX_SIGNAL_DBM: nl80211_attrs = 151;
pub const nl80211_attrs_NL80211_ATTR_BG_SCAN_PERIOD: nl80211_attrs = 152;
pub const nl80211_attrs_NL80211_ATTR_WDEV: nl80211_attrs = 153;
pub const nl80211_attrs_NL80211_ATTR_USER_REG_HINT_TYPE: nl80211_attrs = 154;
pub const nl80211_attrs_NL80211_ATTR_CONN_FAILED_REASON: nl80211_attrs = 155;
pub const nl80211_attrs_NL80211_ATTR_AUTH_DATA: nl80211_attrs = 156;
pub const nl80211_attrs_NL80211_ATTR_VHT_CAPABILITY: nl80211_attrs = 157;
pub const nl80211_attrs_NL80211_ATTR_SCAN_FLAGS: nl80211_attrs = 158;
pub const nl80211_attrs_NL80211_ATTR_CHANNEL_WIDTH: nl80211_attrs = 159;
pub const nl80211_attrs_NL80211_ATTR_CENTER_FREQ1: nl80211_attrs = 160;
pub const nl80211_attrs_NL80211_ATTR_CENTER_FREQ2: nl80211_attrs = 161;
pub const nl80211_attrs_NL80211_ATTR_P2P_CTWINDOW: nl80211_attrs = 162;
pub const nl80211_attrs_NL80211_ATTR_P2P_OPPPS: nl80211_attrs = 163;
pub const nl80211_attrs_NL80211_ATTR_LOCAL_MESH_POWER_MODE: nl80211_attrs = 164;
pub const nl80211_attrs_NL80211_ATTR_ACL_POLICY: nl80211_attrs = 165;
pub const nl80211_attrs_NL80211_ATTR_MAC_ADDRS: nl80211_attrs = 166;
pub const nl80211_attrs_NL80211_ATTR_MAC_ACL_MAX: nl80211_attrs = 167;
pub const nl80211_attrs_NL80211_ATTR_RADAR_EVENT: nl80211_attrs = 168;
pub const nl80211_attrs_NL80211_ATTR_EXT_CAPA: nl80211_attrs = 169;
pub const nl80211_attrs_NL80211_ATTR_EXT_CAPA_MASK: nl80211_attrs = 170;
pub const nl80211_attrs_NL80211_ATTR_STA_CAPABILITY: nl80211_attrs = 171;
pub const nl80211_attrs_NL80211_ATTR_STA_EXT_CAPABILITY: nl80211_attrs = 172;
pub const nl80211_attrs_NL80211_ATTR_PROTOCOL_FEATURES: nl80211_attrs = 173;
pub const nl80211_attrs_NL80211_ATTR_SPLIT_WIPHY_DUMP: nl80211_attrs = 174;
pub const nl80211_attrs_NL80211_ATTR_DISABLE_VHT: nl80211_attrs = 175;
pub const nl80211_attrs_NL80211_ATTR_VHT_CAPABILITY_MASK: nl80211_attrs = 176;
pub const nl80211_attrs_NL80211_ATTR_MDID: nl80211_attrs = 177;
pub const nl80211_attrs_NL80211_ATTR_IE_RIC: nl80211_attrs = 178;
pub const nl80211_attrs_NL80211_ATTR_CRIT_PROT_ID: nl80211_attrs = 179;
pub const nl80211_attrs_NL80211_ATTR_MAX_CRIT_PROT_DURATION: nl80211_attrs = 180;
pub const nl80211_attrs_NL80211_ATTR_PEER_AID: nl80211_attrs = 181;
pub const nl80211_attrs_NL80211_ATTR_COALESCE_RULE: nl80211_attrs = 182;
pub const nl80211_attrs_NL80211_ATTR_CH_SWITCH_COUNT: nl80211_attrs = 183;
pub const nl80211_attrs_NL80211_ATTR_CH_SWITCH_BLOCK_TX: nl80211_attrs = 184;
pub const nl80211_attrs_NL80211_ATTR_CSA_IES: nl80211_attrs = 185;
pub const nl80211_attrs_NL80211_ATTR_CSA_C_OFF_BEACON: nl80211_attrs = 186;
pub const nl80211_attrs_NL80211_ATTR_CSA_C_OFF_PRESP: nl80211_attrs = 187;
pub const nl80211_attrs_NL80211_ATTR_RXMGMT_FLAGS: nl80211_attrs = 188;
pub const nl80211_attrs_NL80211_ATTR_STA_SUPPORTED_CHANNELS: nl80211_attrs = 189;
pub const nl80211_attrs_NL80211_ATTR_STA_SUPPORTED_OPER_CLASSES: nl80211_attrs = 190;
pub const nl80211_attrs_NL80211_ATTR_HANDLE_DFS: nl80211_attrs = 191;
pub const nl80211_attrs_NL80211_ATTR_SUPPORT_5_MHZ: nl80211_attrs = 192;
pub const nl80211_attrs_NL80211_ATTR_SUPPORT_10_MHZ: nl80211_attrs = 193;
pub const nl80211_attrs_NL80211_ATTR_OPMODE_NOTIF: nl80211_attrs = 194;
pub const nl80211_attrs_NL80211_ATTR_VENDOR_ID: nl80211_attrs = 195;
pub const nl80211_attrs_NL80211_ATTR_VENDOR_SUBCMD: nl80211_attrs = 196;
pub const nl80211_attrs_NL80211_ATTR_VENDOR_DATA: nl80211_attrs = 197;
pub const nl80211_attrs_NL80211_ATTR_VENDOR_EVENTS: nl80211_attrs = 198;
pub const nl80211_attrs_NL80211_ATTR_QOS_MAP: nl80211_attrs = 199;
pub const nl80211_attrs_NL80211_ATTR_MAC_HINT: nl80211_attrs = 200;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_FREQ_HINT: nl80211_attrs = 201;
pub const nl80211_attrs_NL80211_ATTR_MAX_AP_ASSOC_STA: nl80211_attrs = 202;
pub const nl80211_attrs_NL80211_ATTR_TDLS_PEER_CAPABILITY: nl80211_attrs = 203;
pub const nl80211_attrs_NL80211_ATTR_SOCKET_OWNER: nl80211_attrs = 204;
pub const nl80211_attrs_NL80211_ATTR_CSA_C_OFFSETS_TX: nl80211_attrs = 205;
pub const nl80211_attrs_NL80211_ATTR_MAX_CSA_COUNTERS: nl80211_attrs = 206;
pub const nl80211_attrs_NL80211_ATTR_TDLS_INITIATOR: nl80211_attrs = 207;
pub const nl80211_attrs_NL80211_ATTR_USE_RRM: nl80211_attrs = 208;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_DYN_ACK: nl80211_attrs = 209;
pub const nl80211_attrs_NL80211_ATTR_TSID: nl80211_attrs = 210;
pub const nl80211_attrs_NL80211_ATTR_USER_PRIO: nl80211_attrs = 211;
pub const nl80211_attrs_NL80211_ATTR_ADMITTED_TIME: nl80211_attrs = 212;
pub const nl80211_attrs_NL80211_ATTR_SMPS_MODE: nl80211_attrs = 213;
pub const nl80211_attrs_NL80211_ATTR_OPER_CLASS: nl80211_attrs = 214;
pub const nl80211_attrs_NL80211_ATTR_MAC_MASK: nl80211_attrs = 215;
pub const nl80211_attrs_NL80211_ATTR_WIPHY_SELF_MANAGED_REG: nl80211_attrs = 216;
pub const nl80211_attrs_NL80211_ATTR_EXT_FEATURES: nl80211_attrs = 217;
pub const nl80211_attrs_NL80211_ATTR_SURVEY_RADIO_STATS: nl80211_attrs = 218;
pub const nl80211_attrs_NL80211_ATTR_NETNS_FD: nl80211_attrs = 219;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_DELAY: nl80211_attrs = 220;
pub const nl80211_attrs_NL80211_ATTR_REG_INDOOR: nl80211_attrs = 221;
pub const nl80211_attrs_NL80211_ATTR_MAX_NUM_SCHED_SCAN_PLANS: nl80211_attrs = 222;
pub const nl80211_attrs_NL80211_ATTR_MAX_SCAN_PLAN_INTERVAL: nl80211_attrs = 223;
pub const nl80211_attrs_NL80211_ATTR_MAX_SCAN_PLAN_ITERATIONS: nl80211_attrs = 224;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_PLANS: nl80211_attrs = 225;
pub const nl80211_attrs_NL80211_ATTR_PBSS: nl80211_attrs = 226;
pub const nl80211_attrs_NL80211_ATTR_BSS_SELECT: nl80211_attrs = 227;
pub const nl80211_attrs_NL80211_ATTR_STA_SUPPORT_P2P_PS: nl80211_attrs = 228;
pub const nl80211_attrs_NL80211_ATTR_PAD: nl80211_attrs = 229;
pub const nl80211_attrs_NL80211_ATTR_IFTYPE_EXT_CAPA: nl80211_attrs = 230;
pub const nl80211_attrs_NL80211_ATTR_MU_MIMO_GROUP_DATA: nl80211_attrs = 231;
pub const nl80211_attrs_NL80211_ATTR_MU_MIMO_FOLLOW_MAC_ADDR: nl80211_attrs = 232;
pub const nl80211_attrs_NL80211_ATTR_SCAN_START_TIME_TSF: nl80211_attrs = 233;
pub const nl80211_attrs_NL80211_ATTR_SCAN_START_TIME_TSF_BSSID: nl80211_attrs = 234;
pub const nl80211_attrs_NL80211_ATTR_MEASUREMENT_DURATION: nl80211_attrs = 235;
pub const nl80211_attrs_NL80211_ATTR_MEASUREMENT_DURATION_MANDATORY: nl80211_attrs = 236;
pub const nl80211_attrs_NL80211_ATTR_MESH_PEER_AID: nl80211_attrs = 237;
pub const nl80211_attrs_NL80211_ATTR_NAN_MASTER_PREF: nl80211_attrs = 238;
pub const nl80211_attrs_NL80211_ATTR_BANDS: nl80211_attrs = 239;
pub const nl80211_attrs_NL80211_ATTR_NAN_FUNC: nl80211_attrs = 240;
pub const nl80211_attrs_NL80211_ATTR_NAN_MATCH: nl80211_attrs = 241;
pub const nl80211_attrs_NL80211_ATTR_FILS_KEK: nl80211_attrs = 242;
pub const nl80211_attrs_NL80211_ATTR_FILS_NONCES: nl80211_attrs = 243;
pub const nl80211_attrs_NL80211_ATTR_MULTICAST_TO_UNICAST_ENABLED: nl80211_attrs = 244;
pub const nl80211_attrs_NL80211_ATTR_BSSID: nl80211_attrs = 245;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_RELATIVE_RSSI: nl80211_attrs = 246;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_RSSI_ADJUST: nl80211_attrs = 247;
pub const nl80211_attrs_NL80211_ATTR_TIMEOUT_REASON: nl80211_attrs = 248;
pub const nl80211_attrs_NL80211_ATTR_FILS_ERP_USERNAME: nl80211_attrs = 249;
pub const nl80211_attrs_NL80211_ATTR_FILS_ERP_REALM: nl80211_attrs = 250;
pub const nl80211_attrs_NL80211_ATTR_FILS_ERP_NEXT_SEQ_NUM: nl80211_attrs = 251;
pub const nl80211_attrs_NL80211_ATTR_FILS_ERP_RRK: nl80211_attrs = 252;
pub const nl80211_attrs_NL80211_ATTR_FILS_CACHE_ID: nl80211_attrs = 253;
pub const nl80211_attrs_NL80211_ATTR_PMK: nl80211_attrs = 254;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_MULTI: nl80211_attrs = 255;
pub const nl80211_attrs_NL80211_ATTR_SCHED_SCAN_MAX_REQS: nl80211_attrs = 256;
pub const nl80211_attrs_NL80211_ATTR_WANT_1X_4WAY_HS: nl80211_attrs = 257;
pub const nl80211_attrs_NL80211_ATTR_PMKR0_NAME: nl80211_attrs = 258;
pub const nl80211_attrs_NL80211_ATTR_PORT_AUTHORIZED: nl80211_attrs = 259;
pub const nl80211_attrs_NL80211_ATTR_EXTERNAL_AUTH_ACTION: nl80211_attrs = 260;
pub const nl80211_attrs_NL80211_ATTR_EXTERNAL_AUTH_SUPPORT: nl80211_attrs = 261;
pub const nl80211_attrs_NL80211_ATTR_NSS: nl80211_attrs = 262;
pub const nl80211_attrs_NL80211_ATTR_ACK_SIGNAL: nl80211_attrs = 263;
pub const nl80211_attrs_NL80211_ATTR_CONTROL_PORT_OVER_NL80211: nl80211_attrs = 264;
pub const nl80211_attrs_NL80211_ATTR_TXQ_STATS: nl80211_attrs = 265;
pub const nl80211_attrs_NL80211_ATTR_TXQ_LIMIT: nl80211_attrs = 266;
pub const nl80211_attrs_NL80211_ATTR_TXQ_MEMORY_LIMIT: nl80211_attrs = 267;
pub const nl80211_attrs_NL80211_ATTR_TXQ_QUANTUM: nl80211_attrs = 268;
pub const nl80211_attrs___NL80211_ATTR_AFTER_LAST: nl80211_attrs = 269;
pub const nl80211_attrs_NUM_NL80211_ATTR: nl80211_attrs = 269;
pub const nl80211_attrs_NL80211_ATTR_MAX: nl80211_attrs = 268;
pub type nl80211_attrs = u32;
pub const nl80211_iftype_NL80211_IFTYPE_UNSPECIFIED: nl80211_iftype = 0;
pub const nl80211_iftype_NL80211_IFTYPE_ADHOC: nl80211_iftype = 1;
pub const nl80211_iftype_NL80211_IFTYPE_STATION: nl80211_iftype = 2;
pub const nl80211_iftype_NL80211_IFTYPE_AP: nl80211_iftype = 3;
pub const nl80211_iftype_NL80211_IFTYPE_AP_VLAN: nl80211_iftype = 4;
pub const nl80211_iftype_NL80211_IFTYPE_WDS: nl80211_iftype = 5;
pub const nl80211_iftype_NL80211_IFTYPE_MONITOR: nl80211_iftype = 6;
pub const nl80211_iftype_NL80211_IFTYPE_MESH_POINT: nl80211_iftype = 7;
pub const nl80211_iftype_NL80211_IFTYPE_P2P_CLIENT: nl80211_iftype = 8;
pub const nl80211_iftype_NL80211_IFTYPE_P2P_GO: nl80211_iftype = 9;
pub const nl80211_iftype_NL80211_IFTYPE_P2P_DEVICE: nl80211_iftype = 10;
pub const nl80211_iftype_NL80211_IFTYPE_OCB: nl80211_iftype = 11;
pub const nl80211_iftype_NL80211_IFTYPE_NAN: nl80211_iftype = 12;
pub const nl80211_iftype_NUM_NL80211_IFTYPES: nl80211_iftype = 13;
pub const nl80211_iftype_NL80211_IFTYPE_MAX: nl80211_iftype = 12;
pub type nl80211_iftype = u32;
pub const nl80211_sta_flags___NL80211_STA_FLAG_INVALID: nl80211_sta_flags = 0;
pub const nl80211_sta_flags_NL80211_STA_FLAG_AUTHORIZED: nl80211_sta_flags = 1;
pub const nl80211_sta_flags_NL80211_STA_FLAG_SHORT_PREAMBLE: nl80211_sta_flags = 2;
pub const nl80211_sta_flags_NL80211_STA_FLAG_WME: nl80211_sta_flags = 3;
pub const nl80211_sta_flags_NL80211_STA_FLAG_MFP: nl80211_sta_flags = 4;
pub const nl80211_sta_flags_NL80211_STA_FLAG_AUTHENTICATED: nl80211_sta_flags = 5;
pub const nl80211_sta_flags_NL80211_STA_FLAG_TDLS_PEER: nl80211_sta_flags = 6;
pub const nl80211_sta_flags_NL80211_STA_FLAG_ASSOCIATED: nl80211_sta_flags = 7;
pub const nl80211_sta_flags___NL80211_STA_FLAG_AFTER_LAST: nl80211_sta_flags = 8;
pub const nl80211_sta_flags_NL80211_STA_FLAG_MAX: nl80211_sta_flags = 7;
pub type nl80211_sta_flags = u32;
pub const nl80211_sta_p2p_ps_status_NL80211_P2P_PS_UNSUPPORTED: nl80211_sta_p2p_ps_status = 0;
pub const nl80211_sta_p2p_ps_status_NL80211_P2P_PS_SUPPORTED: nl80211_sta_p2p_ps_status = 1;
pub const nl80211_sta_p2p_ps_status_NUM_NL80211_P2P_PS_STATUS: nl80211_sta_p2p_ps_status = 2;
pub type nl80211_sta_p2p_ps_status = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_sta_flag_update {
  pub mask: __u32,
  pub set: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_sta_flag_update() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_sta_flag_update>(),
    8usize,
    concat!("Size of: ", stringify!(nl80211_sta_flag_update))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_sta_flag_update>(),
    1usize,
    concat!("Alignment of ", stringify!(nl80211_sta_flag_update))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_sta_flag_update>())).mask as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_sta_flag_update),
      "::",
      stringify!(mask)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_sta_flag_update>())).set as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_sta_flag_update),
      "::",
      stringify!(set)
    )
  );
}
pub const nl80211_rate_info___NL80211_RATE_INFO_INVALID: nl80211_rate_info = 0;
pub const nl80211_rate_info_NL80211_RATE_INFO_BITRATE: nl80211_rate_info = 1;
pub const nl80211_rate_info_NL80211_RATE_INFO_MCS: nl80211_rate_info = 2;
pub const nl80211_rate_info_NL80211_RATE_INFO_40_MHZ_WIDTH: nl80211_rate_info = 3;
pub const nl80211_rate_info_NL80211_RATE_INFO_SHORT_GI: nl80211_rate_info = 4;
pub const nl80211_rate_info_NL80211_RATE_INFO_BITRATE32: nl80211_rate_info = 5;
pub const nl80211_rate_info_NL80211_RATE_INFO_VHT_MCS: nl80211_rate_info = 6;
pub const nl80211_rate_info_NL80211_RATE_INFO_VHT_NSS: nl80211_rate_info = 7;
pub const nl80211_rate_info_NL80211_RATE_INFO_80_MHZ_WIDTH: nl80211_rate_info = 8;
pub const nl80211_rate_info_NL80211_RATE_INFO_80P80_MHZ_WIDTH: nl80211_rate_info = 9;
pub const nl80211_rate_info_NL80211_RATE_INFO_160_MHZ_WIDTH: nl80211_rate_info = 10;
pub const nl80211_rate_info_NL80211_RATE_INFO_10_MHZ_WIDTH: nl80211_rate_info = 11;
pub const nl80211_rate_info_NL80211_RATE_INFO_5_MHZ_WIDTH: nl80211_rate_info = 12;
pub const nl80211_rate_info___NL80211_RATE_INFO_AFTER_LAST: nl80211_rate_info = 13;
pub const nl80211_rate_info_NL80211_RATE_INFO_MAX: nl80211_rate_info = 12;
pub type nl80211_rate_info = u32;
pub const nl80211_sta_bss_param___NL80211_STA_BSS_PARAM_INVALID: nl80211_sta_bss_param = 0;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_CTS_PROT: nl80211_sta_bss_param = 1;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_SHORT_PREAMBLE: nl80211_sta_bss_param = 2;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_SHORT_SLOT_TIME: nl80211_sta_bss_param = 3;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_DTIM_PERIOD: nl80211_sta_bss_param = 4;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_BEACON_INTERVAL: nl80211_sta_bss_param = 5;
pub const nl80211_sta_bss_param___NL80211_STA_BSS_PARAM_AFTER_LAST: nl80211_sta_bss_param = 6;
pub const nl80211_sta_bss_param_NL80211_STA_BSS_PARAM_MAX: nl80211_sta_bss_param = 5;
pub type nl80211_sta_bss_param = u32;
pub const nl80211_sta_info___NL80211_STA_INFO_INVALID: nl80211_sta_info = 0;
pub const nl80211_sta_info_NL80211_STA_INFO_INACTIVE_TIME: nl80211_sta_info = 1;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_BYTES: nl80211_sta_info = 2;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_BYTES: nl80211_sta_info = 3;
pub const nl80211_sta_info_NL80211_STA_INFO_LLID: nl80211_sta_info = 4;
pub const nl80211_sta_info_NL80211_STA_INFO_PLID: nl80211_sta_info = 5;
pub const nl80211_sta_info_NL80211_STA_INFO_PLINK_STATE: nl80211_sta_info = 6;
pub const nl80211_sta_info_NL80211_STA_INFO_SIGNAL: nl80211_sta_info = 7;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_BITRATE: nl80211_sta_info = 8;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_PACKETS: nl80211_sta_info = 9;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_PACKETS: nl80211_sta_info = 10;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_RETRIES: nl80211_sta_info = 11;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_FAILED: nl80211_sta_info = 12;
pub const nl80211_sta_info_NL80211_STA_INFO_SIGNAL_AVG: nl80211_sta_info = 13;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_BITRATE: nl80211_sta_info = 14;
pub const nl80211_sta_info_NL80211_STA_INFO_BSS_PARAM: nl80211_sta_info = 15;
pub const nl80211_sta_info_NL80211_STA_INFO_CONNECTED_TIME: nl80211_sta_info = 16;
pub const nl80211_sta_info_NL80211_STA_INFO_STA_FLAGS: nl80211_sta_info = 17;
pub const nl80211_sta_info_NL80211_STA_INFO_BEACON_LOSS: nl80211_sta_info = 18;
pub const nl80211_sta_info_NL80211_STA_INFO_T_OFFSET: nl80211_sta_info = 19;
pub const nl80211_sta_info_NL80211_STA_INFO_LOCAL_PM: nl80211_sta_info = 20;
pub const nl80211_sta_info_NL80211_STA_INFO_PEER_PM: nl80211_sta_info = 21;
pub const nl80211_sta_info_NL80211_STA_INFO_NONPEER_PM: nl80211_sta_info = 22;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_BYTES64: nl80211_sta_info = 23;
pub const nl80211_sta_info_NL80211_STA_INFO_TX_BYTES64: nl80211_sta_info = 24;
pub const nl80211_sta_info_NL80211_STA_INFO_CHAIN_SIGNAL: nl80211_sta_info = 25;
pub const nl80211_sta_info_NL80211_STA_INFO_CHAIN_SIGNAL_AVG: nl80211_sta_info = 26;
pub const nl80211_sta_info_NL80211_STA_INFO_EXPECTED_THROUGHPUT: nl80211_sta_info = 27;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_DROP_MISC: nl80211_sta_info = 28;
pub const nl80211_sta_info_NL80211_STA_INFO_BEACON_RX: nl80211_sta_info = 29;
pub const nl80211_sta_info_NL80211_STA_INFO_BEACON_SIGNAL_AVG: nl80211_sta_info = 30;
pub const nl80211_sta_info_NL80211_STA_INFO_TID_STATS: nl80211_sta_info = 31;
pub const nl80211_sta_info_NL80211_STA_INFO_RX_DURATION: nl80211_sta_info = 32;
pub const nl80211_sta_info_NL80211_STA_INFO_PAD: nl80211_sta_info = 33;
pub const nl80211_sta_info_NL80211_STA_INFO_ACK_SIGNAL: nl80211_sta_info = 34;
pub const nl80211_sta_info_NL80211_STA_INFO_DATA_ACK_SIGNAL_AVG: nl80211_sta_info = 35;
pub const nl80211_sta_info___NL80211_STA_INFO_AFTER_LAST: nl80211_sta_info = 36;
pub const nl80211_sta_info_NL80211_STA_INFO_MAX: nl80211_sta_info = 35;
pub type nl80211_sta_info = u32;
pub const nl80211_tid_stats___NL80211_TID_STATS_INVALID: nl80211_tid_stats = 0;
pub const nl80211_tid_stats_NL80211_TID_STATS_RX_MSDU: nl80211_tid_stats = 1;
pub const nl80211_tid_stats_NL80211_TID_STATS_TX_MSDU: nl80211_tid_stats = 2;
pub const nl80211_tid_stats_NL80211_TID_STATS_TX_MSDU_RETRIES: nl80211_tid_stats = 3;
pub const nl80211_tid_stats_NL80211_TID_STATS_TX_MSDU_FAILED: nl80211_tid_stats = 4;
pub const nl80211_tid_stats_NL80211_TID_STATS_PAD: nl80211_tid_stats = 5;
pub const nl80211_tid_stats_NL80211_TID_STATS_TXQ_STATS: nl80211_tid_stats = 6;
pub const nl80211_tid_stats_NUM_NL80211_TID_STATS: nl80211_tid_stats = 7;
pub const nl80211_tid_stats_NL80211_TID_STATS_MAX: nl80211_tid_stats = 6;
pub type nl80211_tid_stats = u32;
pub const nl80211_txq_stats___NL80211_TXQ_STATS_INVALID: nl80211_txq_stats = 0;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_BACKLOG_BYTES: nl80211_txq_stats = 1;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_BACKLOG_PACKETS: nl80211_txq_stats = 2;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_FLOWS: nl80211_txq_stats = 3;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_DROPS: nl80211_txq_stats = 4;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_ECN_MARKS: nl80211_txq_stats = 5;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_OVERLIMIT: nl80211_txq_stats = 6;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_OVERMEMORY: nl80211_txq_stats = 7;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_COLLISIONS: nl80211_txq_stats = 8;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_TX_BYTES: nl80211_txq_stats = 9;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_TX_PACKETS: nl80211_txq_stats = 10;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_MAX_FLOWS: nl80211_txq_stats = 11;
pub const nl80211_txq_stats_NUM_NL80211_TXQ_STATS: nl80211_txq_stats = 12;
pub const nl80211_txq_stats_NL80211_TXQ_STATS_MAX: nl80211_txq_stats = 11;
pub type nl80211_txq_stats = u32;
pub const nl80211_mpath_flags_NL80211_MPATH_FLAG_ACTIVE: nl80211_mpath_flags = 1;
pub const nl80211_mpath_flags_NL80211_MPATH_FLAG_RESOLVING: nl80211_mpath_flags = 2;
pub const nl80211_mpath_flags_NL80211_MPATH_FLAG_SN_VALID: nl80211_mpath_flags = 4;
pub const nl80211_mpath_flags_NL80211_MPATH_FLAG_FIXED: nl80211_mpath_flags = 8;
pub const nl80211_mpath_flags_NL80211_MPATH_FLAG_RESOLVED: nl80211_mpath_flags = 16;
pub type nl80211_mpath_flags = u32;
pub const nl80211_mpath_info___NL80211_MPATH_INFO_INVALID: nl80211_mpath_info = 0;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_FRAME_QLEN: nl80211_mpath_info = 1;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_SN: nl80211_mpath_info = 2;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_METRIC: nl80211_mpath_info = 3;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_EXPTIME: nl80211_mpath_info = 4;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_FLAGS: nl80211_mpath_info = 5;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_DISCOVERY_TIMEOUT: nl80211_mpath_info = 6;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_DISCOVERY_RETRIES: nl80211_mpath_info = 7;
pub const nl80211_mpath_info___NL80211_MPATH_INFO_AFTER_LAST: nl80211_mpath_info = 8;
pub const nl80211_mpath_info_NL80211_MPATH_INFO_MAX: nl80211_mpath_info = 7;
pub type nl80211_mpath_info = u32;
pub const nl80211_band_attr___NL80211_BAND_ATTR_INVALID: nl80211_band_attr = 0;
pub const nl80211_band_attr_NL80211_BAND_ATTR_FREQS: nl80211_band_attr = 1;
pub const nl80211_band_attr_NL80211_BAND_ATTR_RATES: nl80211_band_attr = 2;
pub const nl80211_band_attr_NL80211_BAND_ATTR_HT_MCS_SET: nl80211_band_attr = 3;
pub const nl80211_band_attr_NL80211_BAND_ATTR_HT_CAPA: nl80211_band_attr = 4;
pub const nl80211_band_attr_NL80211_BAND_ATTR_HT_AMPDU_FACTOR: nl80211_band_attr = 5;
pub const nl80211_band_attr_NL80211_BAND_ATTR_HT_AMPDU_DENSITY: nl80211_band_attr = 6;
pub const nl80211_band_attr_NL80211_BAND_ATTR_VHT_MCS_SET: nl80211_band_attr = 7;
pub const nl80211_band_attr_NL80211_BAND_ATTR_VHT_CAPA: nl80211_band_attr = 8;
pub const nl80211_band_attr___NL80211_BAND_ATTR_AFTER_LAST: nl80211_band_attr = 9;
pub const nl80211_band_attr_NL80211_BAND_ATTR_MAX: nl80211_band_attr = 8;
pub type nl80211_band_attr = u32;
pub const nl80211_wmm_rule___NL80211_WMMR_INVALID: nl80211_wmm_rule = 0;
pub const nl80211_wmm_rule_NL80211_WMMR_CW_MIN: nl80211_wmm_rule = 1;
pub const nl80211_wmm_rule_NL80211_WMMR_CW_MAX: nl80211_wmm_rule = 2;
pub const nl80211_wmm_rule_NL80211_WMMR_AIFSN: nl80211_wmm_rule = 3;
pub const nl80211_wmm_rule_NL80211_WMMR_TXOP: nl80211_wmm_rule = 4;
pub const nl80211_wmm_rule___NL80211_WMMR_LAST: nl80211_wmm_rule = 5;
pub const nl80211_wmm_rule_NL80211_WMMR_MAX: nl80211_wmm_rule = 4;
pub type nl80211_wmm_rule = u32;
pub const nl80211_frequency_attr___NL80211_FREQUENCY_ATTR_INVALID: nl80211_frequency_attr = 0;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_FREQ: nl80211_frequency_attr = 1;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_DISABLED: nl80211_frequency_attr = 2;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_IR: nl80211_frequency_attr = 3;
pub const nl80211_frequency_attr___NL80211_FREQUENCY_ATTR_NO_IBSS: nl80211_frequency_attr = 4;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_RADAR: nl80211_frequency_attr = 5;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_MAX_TX_POWER: nl80211_frequency_attr = 6;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_DFS_STATE: nl80211_frequency_attr = 7;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_DFS_TIME: nl80211_frequency_attr = 8;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_HT40_MINUS: nl80211_frequency_attr = 9;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_HT40_PLUS: nl80211_frequency_attr = 10;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_80MHZ: nl80211_frequency_attr = 11;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_160MHZ: nl80211_frequency_attr = 12;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_DFS_CAC_TIME: nl80211_frequency_attr = 13;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_INDOOR_ONLY: nl80211_frequency_attr = 14;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_IR_CONCURRENT: nl80211_frequency_attr = 15;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_20MHZ: nl80211_frequency_attr = 16;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_NO_10MHZ: nl80211_frequency_attr = 17;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_WMM: nl80211_frequency_attr = 18;
pub const nl80211_frequency_attr___NL80211_FREQUENCY_ATTR_AFTER_LAST: nl80211_frequency_attr = 19;
pub const nl80211_frequency_attr_NL80211_FREQUENCY_ATTR_MAX: nl80211_frequency_attr = 18;
pub type nl80211_frequency_attr = u32;
pub const nl80211_bitrate_attr___NL80211_BITRATE_ATTR_INVALID: nl80211_bitrate_attr = 0;
pub const nl80211_bitrate_attr_NL80211_BITRATE_ATTR_RATE: nl80211_bitrate_attr = 1;
pub const nl80211_bitrate_attr_NL80211_BITRATE_ATTR_2GHZ_SHORTPREAMBLE: nl80211_bitrate_attr = 2;
pub const nl80211_bitrate_attr___NL80211_BITRATE_ATTR_AFTER_LAST: nl80211_bitrate_attr = 3;
pub const nl80211_bitrate_attr_NL80211_BITRATE_ATTR_MAX: nl80211_bitrate_attr = 2;
pub type nl80211_bitrate_attr = u32;
pub const nl80211_reg_initiator_NL80211_REGDOM_SET_BY_CORE: nl80211_reg_initiator = 0;
pub const nl80211_reg_initiator_NL80211_REGDOM_SET_BY_USER: nl80211_reg_initiator = 1;
pub const nl80211_reg_initiator_NL80211_REGDOM_SET_BY_DRIVER: nl80211_reg_initiator = 2;
pub const nl80211_reg_initiator_NL80211_REGDOM_SET_BY_COUNTRY_IE: nl80211_reg_initiator = 3;
pub type nl80211_reg_initiator = u32;
pub const nl80211_reg_type_NL80211_REGDOM_TYPE_COUNTRY: nl80211_reg_type = 0;
pub const nl80211_reg_type_NL80211_REGDOM_TYPE_WORLD: nl80211_reg_type = 1;
pub const nl80211_reg_type_NL80211_REGDOM_TYPE_CUSTOM_WORLD: nl80211_reg_type = 2;
pub const nl80211_reg_type_NL80211_REGDOM_TYPE_INTERSECTION: nl80211_reg_type = 3;
pub type nl80211_reg_type = u32;
pub const nl80211_reg_rule_attr___NL80211_REG_RULE_ATTR_INVALID: nl80211_reg_rule_attr = 0;
pub const nl80211_reg_rule_attr_NL80211_ATTR_REG_RULE_FLAGS: nl80211_reg_rule_attr = 1;
pub const nl80211_reg_rule_attr_NL80211_ATTR_FREQ_RANGE_START: nl80211_reg_rule_attr = 2;
pub const nl80211_reg_rule_attr_NL80211_ATTR_FREQ_RANGE_END: nl80211_reg_rule_attr = 3;
pub const nl80211_reg_rule_attr_NL80211_ATTR_FREQ_RANGE_MAX_BW: nl80211_reg_rule_attr = 4;
pub const nl80211_reg_rule_attr_NL80211_ATTR_POWER_RULE_MAX_ANT_GAIN: nl80211_reg_rule_attr = 5;
pub const nl80211_reg_rule_attr_NL80211_ATTR_POWER_RULE_MAX_EIRP: nl80211_reg_rule_attr = 6;
pub const nl80211_reg_rule_attr_NL80211_ATTR_DFS_CAC_TIME: nl80211_reg_rule_attr = 7;
pub const nl80211_reg_rule_attr___NL80211_REG_RULE_ATTR_AFTER_LAST: nl80211_reg_rule_attr = 8;
pub const nl80211_reg_rule_attr_NL80211_REG_RULE_ATTR_MAX: nl80211_reg_rule_attr = 7;
pub type nl80211_reg_rule_attr = u32;
pub const nl80211_sched_scan_match_attr___NL80211_SCHED_SCAN_MATCH_ATTR_INVALID:
  nl80211_sched_scan_match_attr = 0;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_SSID:
  nl80211_sched_scan_match_attr = 1;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_RSSI:
  nl80211_sched_scan_match_attr = 2;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_RELATIVE_RSSI:
  nl80211_sched_scan_match_attr = 3;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_RSSI_ADJUST:
  nl80211_sched_scan_match_attr = 4;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_BSSID:
  nl80211_sched_scan_match_attr = 5;
pub const nl80211_sched_scan_match_attr___NL80211_SCHED_SCAN_MATCH_ATTR_AFTER_LAST:
  nl80211_sched_scan_match_attr = 6;
pub const nl80211_sched_scan_match_attr_NL80211_SCHED_SCAN_MATCH_ATTR_MAX:
  nl80211_sched_scan_match_attr = 5;
pub type nl80211_sched_scan_match_attr = u32;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_OFDM: nl80211_reg_rule_flags = 1;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_CCK: nl80211_reg_rule_flags = 2;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_INDOOR: nl80211_reg_rule_flags = 4;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_OUTDOOR: nl80211_reg_rule_flags = 8;
pub const nl80211_reg_rule_flags_NL80211_RRF_DFS: nl80211_reg_rule_flags = 16;
pub const nl80211_reg_rule_flags_NL80211_RRF_PTP_ONLY: nl80211_reg_rule_flags = 32;
pub const nl80211_reg_rule_flags_NL80211_RRF_PTMP_ONLY: nl80211_reg_rule_flags = 64;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_IR: nl80211_reg_rule_flags = 128;
pub const nl80211_reg_rule_flags___NL80211_RRF_NO_IBSS: nl80211_reg_rule_flags = 256;
pub const nl80211_reg_rule_flags_NL80211_RRF_AUTO_BW: nl80211_reg_rule_flags = 2048;
pub const nl80211_reg_rule_flags_NL80211_RRF_IR_CONCURRENT: nl80211_reg_rule_flags = 4096;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_HT40MINUS: nl80211_reg_rule_flags = 8192;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_HT40PLUS: nl80211_reg_rule_flags = 16384;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_80MHZ: nl80211_reg_rule_flags = 32768;
pub const nl80211_reg_rule_flags_NL80211_RRF_NO_160MHZ: nl80211_reg_rule_flags = 65536;
pub type nl80211_reg_rule_flags = u32;
pub const nl80211_dfs_regions_NL80211_DFS_UNSET: nl80211_dfs_regions = 0;
pub const nl80211_dfs_regions_NL80211_DFS_FCC: nl80211_dfs_regions = 1;
pub const nl80211_dfs_regions_NL80211_DFS_ETSI: nl80211_dfs_regions = 2;
pub const nl80211_dfs_regions_NL80211_DFS_JP: nl80211_dfs_regions = 3;
pub type nl80211_dfs_regions = u32;
pub const nl80211_user_reg_hint_type_NL80211_USER_REG_HINT_USER: nl80211_user_reg_hint_type = 0;
pub const nl80211_user_reg_hint_type_NL80211_USER_REG_HINT_CELL_BASE: nl80211_user_reg_hint_type =
  1;
pub const nl80211_user_reg_hint_type_NL80211_USER_REG_HINT_INDOOR: nl80211_user_reg_hint_type = 2;
pub type nl80211_user_reg_hint_type = u32;
pub const nl80211_survey_info___NL80211_SURVEY_INFO_INVALID: nl80211_survey_info = 0;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_FREQUENCY: nl80211_survey_info = 1;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_NOISE: nl80211_survey_info = 2;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_IN_USE: nl80211_survey_info = 3;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME: nl80211_survey_info = 4;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME_BUSY: nl80211_survey_info = 5;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME_EXT_BUSY: nl80211_survey_info = 6;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME_RX: nl80211_survey_info = 7;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME_TX: nl80211_survey_info = 8;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_TIME_SCAN: nl80211_survey_info = 9;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_PAD: nl80211_survey_info = 10;
pub const nl80211_survey_info___NL80211_SURVEY_INFO_AFTER_LAST: nl80211_survey_info = 11;
pub const nl80211_survey_info_NL80211_SURVEY_INFO_MAX: nl80211_survey_info = 10;
pub type nl80211_survey_info = u32;
pub const nl80211_mntr_flags___NL80211_MNTR_FLAG_INVALID: nl80211_mntr_flags = 0;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_FCSFAIL: nl80211_mntr_flags = 1;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_PLCPFAIL: nl80211_mntr_flags = 2;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_CONTROL: nl80211_mntr_flags = 3;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_OTHER_BSS: nl80211_mntr_flags = 4;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_COOK_FRAMES: nl80211_mntr_flags = 5;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_ACTIVE: nl80211_mntr_flags = 6;
pub const nl80211_mntr_flags___NL80211_MNTR_FLAG_AFTER_LAST: nl80211_mntr_flags = 7;
pub const nl80211_mntr_flags_NL80211_MNTR_FLAG_MAX: nl80211_mntr_flags = 6;
pub type nl80211_mntr_flags = u32;
pub const nl80211_mesh_power_mode_NL80211_MESH_POWER_UNKNOWN: nl80211_mesh_power_mode = 0;
pub const nl80211_mesh_power_mode_NL80211_MESH_POWER_ACTIVE: nl80211_mesh_power_mode = 1;
pub const nl80211_mesh_power_mode_NL80211_MESH_POWER_LIGHT_SLEEP: nl80211_mesh_power_mode = 2;
pub const nl80211_mesh_power_mode_NL80211_MESH_POWER_DEEP_SLEEP: nl80211_mesh_power_mode = 3;
pub const nl80211_mesh_power_mode___NL80211_MESH_POWER_AFTER_LAST: nl80211_mesh_power_mode = 4;
pub const nl80211_mesh_power_mode_NL80211_MESH_POWER_MAX: nl80211_mesh_power_mode = 3;
pub type nl80211_mesh_power_mode = u32;
pub const nl80211_meshconf_params___NL80211_MESHCONF_INVALID: nl80211_meshconf_params = 0;
pub const nl80211_meshconf_params_NL80211_MESHCONF_RETRY_TIMEOUT: nl80211_meshconf_params = 1;
pub const nl80211_meshconf_params_NL80211_MESHCONF_CONFIRM_TIMEOUT: nl80211_meshconf_params = 2;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HOLDING_TIMEOUT: nl80211_meshconf_params = 3;
pub const nl80211_meshconf_params_NL80211_MESHCONF_MAX_PEER_LINKS: nl80211_meshconf_params = 4;
pub const nl80211_meshconf_params_NL80211_MESHCONF_MAX_RETRIES: nl80211_meshconf_params = 5;
pub const nl80211_meshconf_params_NL80211_MESHCONF_TTL: nl80211_meshconf_params = 6;
pub const nl80211_meshconf_params_NL80211_MESHCONF_AUTO_OPEN_PLINKS: nl80211_meshconf_params = 7;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_MAX_PREQ_RETRIES: nl80211_meshconf_params =
  8;
pub const nl80211_meshconf_params_NL80211_MESHCONF_PATH_REFRESH_TIME: nl80211_meshconf_params = 9;
pub const nl80211_meshconf_params_NL80211_MESHCONF_MIN_DISCOVERY_TIMEOUT: nl80211_meshconf_params =
  10;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_ACTIVE_PATH_TIMEOUT:
  nl80211_meshconf_params = 11;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_PREQ_MIN_INTERVAL: nl80211_meshconf_params =
  12;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_NET_DIAM_TRVS_TIME:
  nl80211_meshconf_params = 13;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_ROOTMODE: nl80211_meshconf_params = 14;
pub const nl80211_meshconf_params_NL80211_MESHCONF_ELEMENT_TTL: nl80211_meshconf_params = 15;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_RANN_INTERVAL: nl80211_meshconf_params = 16;
pub const nl80211_meshconf_params_NL80211_MESHCONF_GATE_ANNOUNCEMENTS: nl80211_meshconf_params = 17;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_PERR_MIN_INTERVAL: nl80211_meshconf_params =
  18;
pub const nl80211_meshconf_params_NL80211_MESHCONF_FORWARDING: nl80211_meshconf_params = 19;
pub const nl80211_meshconf_params_NL80211_MESHCONF_RSSI_THRESHOLD: nl80211_meshconf_params = 20;
pub const nl80211_meshconf_params_NL80211_MESHCONF_SYNC_OFFSET_MAX_NEIGHBOR:
  nl80211_meshconf_params = 21;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HT_OPMODE: nl80211_meshconf_params = 22;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_PATH_TO_ROOT_TIMEOUT:
  nl80211_meshconf_params = 23;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_ROOT_INTERVAL: nl80211_meshconf_params = 24;
pub const nl80211_meshconf_params_NL80211_MESHCONF_HWMP_CONFIRMATION_INTERVAL:
  nl80211_meshconf_params = 25;
pub const nl80211_meshconf_params_NL80211_MESHCONF_POWER_MODE: nl80211_meshconf_params = 26;
pub const nl80211_meshconf_params_NL80211_MESHCONF_AWAKE_WINDOW: nl80211_meshconf_params = 27;
pub const nl80211_meshconf_params_NL80211_MESHCONF_PLINK_TIMEOUT: nl80211_meshconf_params = 28;
pub const nl80211_meshconf_params___NL80211_MESHCONF_ATTR_AFTER_LAST: nl80211_meshconf_params = 29;
pub const nl80211_meshconf_params_NL80211_MESHCONF_ATTR_MAX: nl80211_meshconf_params = 28;
pub type nl80211_meshconf_params = u32;
pub const nl80211_mesh_setup_params___NL80211_MESH_SETUP_INVALID: nl80211_mesh_setup_params = 0;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_ENABLE_VENDOR_PATH_SEL:
  nl80211_mesh_setup_params = 1;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_ENABLE_VENDOR_METRIC:
  nl80211_mesh_setup_params = 2;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_IE: nl80211_mesh_setup_params = 3;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_USERSPACE_AUTH: nl80211_mesh_setup_params =
  4;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_USERSPACE_AMPE: nl80211_mesh_setup_params =
  5;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_ENABLE_VENDOR_SYNC:
  nl80211_mesh_setup_params = 6;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_USERSPACE_MPM: nl80211_mesh_setup_params = 7;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_AUTH_PROTOCOL: nl80211_mesh_setup_params = 8;
pub const nl80211_mesh_setup_params___NL80211_MESH_SETUP_ATTR_AFTER_LAST:
  nl80211_mesh_setup_params = 9;
pub const nl80211_mesh_setup_params_NL80211_MESH_SETUP_ATTR_MAX: nl80211_mesh_setup_params = 8;
pub type nl80211_mesh_setup_params = u32;
pub const nl80211_txq_attr___NL80211_TXQ_ATTR_INVALID: nl80211_txq_attr = 0;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_AC: nl80211_txq_attr = 1;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_TXOP: nl80211_txq_attr = 2;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_CWMIN: nl80211_txq_attr = 3;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_CWMAX: nl80211_txq_attr = 4;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_AIFS: nl80211_txq_attr = 5;
pub const nl80211_txq_attr___NL80211_TXQ_ATTR_AFTER_LAST: nl80211_txq_attr = 6;
pub const nl80211_txq_attr_NL80211_TXQ_ATTR_MAX: nl80211_txq_attr = 5;
pub type nl80211_txq_attr = u32;
pub const nl80211_ac_NL80211_AC_VO: nl80211_ac = 0;
pub const nl80211_ac_NL80211_AC_VI: nl80211_ac = 1;
pub const nl80211_ac_NL80211_AC_BE: nl80211_ac = 2;
pub const nl80211_ac_NL80211_AC_BK: nl80211_ac = 3;
pub const nl80211_ac_NL80211_NUM_ACS: nl80211_ac = 4;
pub type nl80211_ac = u32;
pub const nl80211_channel_type_NL80211_CHAN_NO_HT: nl80211_channel_type = 0;
pub const nl80211_channel_type_NL80211_CHAN_HT20: nl80211_channel_type = 1;
pub const nl80211_channel_type_NL80211_CHAN_HT40MINUS: nl80211_channel_type = 2;
pub const nl80211_channel_type_NL80211_CHAN_HT40PLUS: nl80211_channel_type = 3;
pub type nl80211_channel_type = u32;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_20_NOHT: nl80211_chan_width = 0;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_20: nl80211_chan_width = 1;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_40: nl80211_chan_width = 2;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_80: nl80211_chan_width = 3;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_80P80: nl80211_chan_width = 4;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_160: nl80211_chan_width = 5;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_5: nl80211_chan_width = 6;
pub const nl80211_chan_width_NL80211_CHAN_WIDTH_10: nl80211_chan_width = 7;
pub type nl80211_chan_width = u32;
pub const nl80211_bss_scan_width_NL80211_BSS_CHAN_WIDTH_20: nl80211_bss_scan_width = 0;
pub const nl80211_bss_scan_width_NL80211_BSS_CHAN_WIDTH_10: nl80211_bss_scan_width = 1;
pub const nl80211_bss_scan_width_NL80211_BSS_CHAN_WIDTH_5: nl80211_bss_scan_width = 2;
pub type nl80211_bss_scan_width = u32;
pub const nl80211_bss___NL80211_BSS_INVALID: nl80211_bss = 0;
pub const nl80211_bss_NL80211_BSS_BSSID: nl80211_bss = 1;
pub const nl80211_bss_NL80211_BSS_FREQUENCY: nl80211_bss = 2;
pub const nl80211_bss_NL80211_BSS_TSF: nl80211_bss = 3;
pub const nl80211_bss_NL80211_BSS_BEACON_INTERVAL: nl80211_bss = 4;
pub const nl80211_bss_NL80211_BSS_CAPABILITY: nl80211_bss = 5;
pub const nl80211_bss_NL80211_BSS_INFORMATION_ELEMENTS: nl80211_bss = 6;
pub const nl80211_bss_NL80211_BSS_SIGNAL_MBM: nl80211_bss = 7;
pub const nl80211_bss_NL80211_BSS_SIGNAL_UNSPEC: nl80211_bss = 8;
pub const nl80211_bss_NL80211_BSS_STATUS: nl80211_bss = 9;
pub const nl80211_bss_NL80211_BSS_SEEN_MS_AGO: nl80211_bss = 10;
pub const nl80211_bss_NL80211_BSS_BEACON_IES: nl80211_bss = 11;
pub const nl80211_bss_NL80211_BSS_CHAN_WIDTH: nl80211_bss = 12;
pub const nl80211_bss_NL80211_BSS_BEACON_TSF: nl80211_bss = 13;
pub const nl80211_bss_NL80211_BSS_PRESP_DATA: nl80211_bss = 14;
pub const nl80211_bss_NL80211_BSS_LAST_SEEN_BOOTTIME: nl80211_bss = 15;
pub const nl80211_bss_NL80211_BSS_PAD: nl80211_bss = 16;
pub const nl80211_bss_NL80211_BSS_PARENT_TSF: nl80211_bss = 17;
pub const nl80211_bss_NL80211_BSS_PARENT_BSSID: nl80211_bss = 18;
pub const nl80211_bss_NL80211_BSS_CHAIN_SIGNAL: nl80211_bss = 19;
pub const nl80211_bss___NL80211_BSS_AFTER_LAST: nl80211_bss = 20;
pub const nl80211_bss_NL80211_BSS_MAX: nl80211_bss = 19;
pub type nl80211_bss = u32;
pub const nl80211_bss_status_NL80211_BSS_STATUS_AUTHENTICATED: nl80211_bss_status = 0;
pub const nl80211_bss_status_NL80211_BSS_STATUS_ASSOCIATED: nl80211_bss_status = 1;
pub const nl80211_bss_status_NL80211_BSS_STATUS_IBSS_JOINED: nl80211_bss_status = 2;
pub type nl80211_bss_status = u32;
pub const nl80211_auth_type_NL80211_AUTHTYPE_OPEN_SYSTEM: nl80211_auth_type = 0;
pub const nl80211_auth_type_NL80211_AUTHTYPE_SHARED_KEY: nl80211_auth_type = 1;
pub const nl80211_auth_type_NL80211_AUTHTYPE_FT: nl80211_auth_type = 2;
pub const nl80211_auth_type_NL80211_AUTHTYPE_NETWORK_EAP: nl80211_auth_type = 3;
pub const nl80211_auth_type_NL80211_AUTHTYPE_SAE: nl80211_auth_type = 4;
pub const nl80211_auth_type_NL80211_AUTHTYPE_FILS_SK: nl80211_auth_type = 5;
pub const nl80211_auth_type_NL80211_AUTHTYPE_FILS_SK_PFS: nl80211_auth_type = 6;
pub const nl80211_auth_type_NL80211_AUTHTYPE_FILS_PK: nl80211_auth_type = 7;
pub const nl80211_auth_type___NL80211_AUTHTYPE_NUM: nl80211_auth_type = 8;
pub const nl80211_auth_type_NL80211_AUTHTYPE_MAX: nl80211_auth_type = 7;
pub const nl80211_auth_type_NL80211_AUTHTYPE_AUTOMATIC: nl80211_auth_type = 8;
pub type nl80211_auth_type = u32;
pub const nl80211_key_type_NL80211_KEYTYPE_GROUP: nl80211_key_type = 0;
pub const nl80211_key_type_NL80211_KEYTYPE_PAIRWISE: nl80211_key_type = 1;
pub const nl80211_key_type_NL80211_KEYTYPE_PEERKEY: nl80211_key_type = 2;
pub const nl80211_key_type_NUM_NL80211_KEYTYPES: nl80211_key_type = 3;
pub type nl80211_key_type = u32;
pub const nl80211_mfp_NL80211_MFP_NO: nl80211_mfp = 0;
pub const nl80211_mfp_NL80211_MFP_REQUIRED: nl80211_mfp = 1;
pub const nl80211_mfp_NL80211_MFP_OPTIONAL: nl80211_mfp = 2;
pub type nl80211_mfp = u32;
pub const nl80211_wpa_versions_NL80211_WPA_VERSION_1: nl80211_wpa_versions = 1;
pub const nl80211_wpa_versions_NL80211_WPA_VERSION_2: nl80211_wpa_versions = 2;
pub type nl80211_wpa_versions = u32;
pub const nl80211_key_default_types___NL80211_KEY_DEFAULT_TYPE_INVALID: nl80211_key_default_types =
  0;
pub const nl80211_key_default_types_NL80211_KEY_DEFAULT_TYPE_UNICAST: nl80211_key_default_types = 1;
pub const nl80211_key_default_types_NL80211_KEY_DEFAULT_TYPE_MULTICAST: nl80211_key_default_types =
  2;
pub const nl80211_key_default_types_NUM_NL80211_KEY_DEFAULT_TYPES: nl80211_key_default_types = 3;
pub type nl80211_key_default_types = u32;
pub const nl80211_key_attributes___NL80211_KEY_INVALID: nl80211_key_attributes = 0;
pub const nl80211_key_attributes_NL80211_KEY_DATA: nl80211_key_attributes = 1;
pub const nl80211_key_attributes_NL80211_KEY_IDX: nl80211_key_attributes = 2;
pub const nl80211_key_attributes_NL80211_KEY_CIPHER: nl80211_key_attributes = 3;
pub const nl80211_key_attributes_NL80211_KEY_SEQ: nl80211_key_attributes = 4;
pub const nl80211_key_attributes_NL80211_KEY_DEFAULT: nl80211_key_attributes = 5;
pub const nl80211_key_attributes_NL80211_KEY_DEFAULT_MGMT: nl80211_key_attributes = 6;
pub const nl80211_key_attributes_NL80211_KEY_TYPE: nl80211_key_attributes = 7;
pub const nl80211_key_attributes_NL80211_KEY_DEFAULT_TYPES: nl80211_key_attributes = 8;
pub const nl80211_key_attributes___NL80211_KEY_AFTER_LAST: nl80211_key_attributes = 9;
pub const nl80211_key_attributes_NL80211_KEY_MAX: nl80211_key_attributes = 8;
pub type nl80211_key_attributes = u32;
pub const nl80211_tx_rate_attributes___NL80211_TXRATE_INVALID: nl80211_tx_rate_attributes = 0;
pub const nl80211_tx_rate_attributes_NL80211_TXRATE_LEGACY: nl80211_tx_rate_attributes = 1;
pub const nl80211_tx_rate_attributes_NL80211_TXRATE_HT: nl80211_tx_rate_attributes = 2;
pub const nl80211_tx_rate_attributes_NL80211_TXRATE_VHT: nl80211_tx_rate_attributes = 3;
pub const nl80211_tx_rate_attributes_NL80211_TXRATE_GI: nl80211_tx_rate_attributes = 4;
pub const nl80211_tx_rate_attributes___NL80211_TXRATE_AFTER_LAST: nl80211_tx_rate_attributes = 5;
pub const nl80211_tx_rate_attributes_NL80211_TXRATE_MAX: nl80211_tx_rate_attributes = 4;
pub type nl80211_tx_rate_attributes = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_txrate_vht {
  pub mcs: [__u16; 8usize],
}
#[test]
fn bindgen_test_layout_nl80211_txrate_vht() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_txrate_vht>(),
    16usize,
    concat!("Size of: ", stringify!(nl80211_txrate_vht))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_txrate_vht>(),
    2usize,
    concat!("Alignment of ", stringify!(nl80211_txrate_vht))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_txrate_vht>())).mcs as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_txrate_vht),
      "::",
      stringify!(mcs)
    )
  );
}
pub const nl80211_txrate_gi_NL80211_TXRATE_DEFAULT_GI: nl80211_txrate_gi = 0;
pub const nl80211_txrate_gi_NL80211_TXRATE_FORCE_SGI: nl80211_txrate_gi = 1;
pub const nl80211_txrate_gi_NL80211_TXRATE_FORCE_LGI: nl80211_txrate_gi = 2;
pub type nl80211_txrate_gi = u32;
pub const nl80211_band_NL80211_BAND_2GHZ: nl80211_band = 0;
pub const nl80211_band_NL80211_BAND_5GHZ: nl80211_band = 1;
pub const nl80211_band_NL80211_BAND_60GHZ: nl80211_band = 2;
pub const nl80211_band_NUM_NL80211_BANDS: nl80211_band = 3;
pub type nl80211_band = u32;
pub const nl80211_ps_state_NL80211_PS_DISABLED: nl80211_ps_state = 0;
pub const nl80211_ps_state_NL80211_PS_ENABLED: nl80211_ps_state = 1;
pub type nl80211_ps_state = u32;
pub const nl80211_attr_cqm___NL80211_ATTR_CQM_INVALID: nl80211_attr_cqm = 0;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_RSSI_THOLD: nl80211_attr_cqm = 1;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_RSSI_HYST: nl80211_attr_cqm = 2;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_RSSI_THRESHOLD_EVENT: nl80211_attr_cqm = 3;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_PKT_LOSS_EVENT: nl80211_attr_cqm = 4;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_TXE_RATE: nl80211_attr_cqm = 5;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_TXE_PKTS: nl80211_attr_cqm = 6;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_TXE_INTVL: nl80211_attr_cqm = 7;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_BEACON_LOSS_EVENT: nl80211_attr_cqm = 8;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_RSSI_LEVEL: nl80211_attr_cqm = 9;
pub const nl80211_attr_cqm___NL80211_ATTR_CQM_AFTER_LAST: nl80211_attr_cqm = 10;
pub const nl80211_attr_cqm_NL80211_ATTR_CQM_MAX: nl80211_attr_cqm = 9;
pub type nl80211_attr_cqm = u32;
pub const nl80211_cqm_rssi_threshold_event_NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW:
  nl80211_cqm_rssi_threshold_event = 0;
pub const nl80211_cqm_rssi_threshold_event_NL80211_CQM_RSSI_THRESHOLD_EVENT_HIGH:
  nl80211_cqm_rssi_threshold_event = 1;
pub const nl80211_cqm_rssi_threshold_event_NL80211_CQM_RSSI_BEACON_LOSS_EVENT:
  nl80211_cqm_rssi_threshold_event = 2;
pub type nl80211_cqm_rssi_threshold_event = u32;
pub const nl80211_tx_power_setting_NL80211_TX_POWER_AUTOMATIC: nl80211_tx_power_setting = 0;
pub const nl80211_tx_power_setting_NL80211_TX_POWER_LIMITED: nl80211_tx_power_setting = 1;
pub const nl80211_tx_power_setting_NL80211_TX_POWER_FIXED: nl80211_tx_power_setting = 2;
pub type nl80211_tx_power_setting = u32;
pub const nl80211_packet_pattern_attr___NL80211_PKTPAT_INVALID: nl80211_packet_pattern_attr = 0;
pub const nl80211_packet_pattern_attr_NL80211_PKTPAT_MASK: nl80211_packet_pattern_attr = 1;
pub const nl80211_packet_pattern_attr_NL80211_PKTPAT_PATTERN: nl80211_packet_pattern_attr = 2;
pub const nl80211_packet_pattern_attr_NL80211_PKTPAT_OFFSET: nl80211_packet_pattern_attr = 3;
pub const nl80211_packet_pattern_attr_NUM_NL80211_PKTPAT: nl80211_packet_pattern_attr = 4;
pub const nl80211_packet_pattern_attr_MAX_NL80211_PKTPAT: nl80211_packet_pattern_attr = 3;
pub type nl80211_packet_pattern_attr = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_pattern_support {
  pub max_patterns: __u32,
  pub min_pattern_len: __u32,
  pub max_pattern_len: __u32,
  pub max_pkt_offset: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_pattern_support() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_pattern_support>(),
    16usize,
    concat!("Size of: ", stringify!(nl80211_pattern_support))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_pattern_support>(),
    1usize,
    concat!("Alignment of ", stringify!(nl80211_pattern_support))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_pattern_support>())).max_patterns as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_pattern_support),
      "::",
      stringify!(max_patterns)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_pattern_support>())).min_pattern_len as *const _ as usize
    },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_pattern_support),
      "::",
      stringify!(min_pattern_len)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_pattern_support>())).max_pattern_len as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_pattern_support),
      "::",
      stringify!(max_pattern_len)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_pattern_support>())).max_pkt_offset as *const _ as usize
    },
    12usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_pattern_support),
      "::",
      stringify!(max_pkt_offset)
    )
  );
}
pub const nl80211_wowlan_triggers___NL80211_WOWLAN_TRIG_INVALID: nl80211_wowlan_triggers = 0;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_ANY: nl80211_wowlan_triggers = 1;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_DISCONNECT: nl80211_wowlan_triggers = 2;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_MAGIC_PKT: nl80211_wowlan_triggers = 3;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_PKT_PATTERN: nl80211_wowlan_triggers = 4;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_GTK_REKEY_SUPPORTED: nl80211_wowlan_triggers =
  5;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_GTK_REKEY_FAILURE: nl80211_wowlan_triggers =
  6;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_EAP_IDENT_REQUEST: nl80211_wowlan_triggers =
  7;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_4WAY_HANDSHAKE: nl80211_wowlan_triggers = 8;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_RFKILL_RELEASE: nl80211_wowlan_triggers = 9;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211: nl80211_wowlan_triggers =
  10;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_PKT_80211_LEN:
  nl80211_wowlan_triggers = 11;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023: nl80211_wowlan_triggers = 12;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_PKT_8023_LEN: nl80211_wowlan_triggers =
  13;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_TCP_CONNECTION: nl80211_wowlan_triggers = 14;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_TCP_MATCH: nl80211_wowlan_triggers =
  15;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_TCP_CONNLOST: nl80211_wowlan_triggers =
  16;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_WAKEUP_TCP_NOMORETOKENS:
  nl80211_wowlan_triggers = 17;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_NET_DETECT: nl80211_wowlan_triggers = 18;
pub const nl80211_wowlan_triggers_NL80211_WOWLAN_TRIG_NET_DETECT_RESULTS: nl80211_wowlan_triggers =
  19;
pub const nl80211_wowlan_triggers_NUM_NL80211_WOWLAN_TRIG: nl80211_wowlan_triggers = 20;
pub const nl80211_wowlan_triggers_MAX_NL80211_WOWLAN_TRIG: nl80211_wowlan_triggers = 19;
pub type nl80211_wowlan_triggers = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_wowlan_tcp_data_seq {
  pub start: __u32,
  pub offset: __u32,
  pub len: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_wowlan_tcp_data_seq() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_wowlan_tcp_data_seq>(),
    12usize,
    concat!("Size of: ", stringify!(nl80211_wowlan_tcp_data_seq))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_wowlan_tcp_data_seq>(),
    4usize,
    concat!("Alignment of ", stringify!(nl80211_wowlan_tcp_data_seq))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_seq>())).start as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_seq),
      "::",
      stringify!(start)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_seq>())).offset as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_seq),
      "::",
      stringify!(offset)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_seq>())).len as *const _ as usize },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_seq),
      "::",
      stringify!(len)
    )
  );
}
#[repr(C)]
#[derive(Debug)]
pub struct nl80211_wowlan_tcp_data_token {
  pub offset: __u32,
  pub len: __u32,
  pub token_stream: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_nl80211_wowlan_tcp_data_token() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_wowlan_tcp_data_token>(),
    8usize,
    concat!("Size of: ", stringify!(nl80211_wowlan_tcp_data_token))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_wowlan_tcp_data_token>(),
    4usize,
    concat!("Alignment of ", stringify!(nl80211_wowlan_tcp_data_token))
  );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_wowlan_tcp_data_token_feature {
  pub min_len: __u32,
  pub max_len: __u32,
  pub bufsize: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_wowlan_tcp_data_token_feature() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_wowlan_tcp_data_token_feature>(),
    12usize,
    concat!(
      "Size of: ",
      stringify!(nl80211_wowlan_tcp_data_token_feature)
    )
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_wowlan_tcp_data_token_feature>(),
    4usize,
    concat!(
      "Alignment of ",
      stringify!(nl80211_wowlan_tcp_data_token_feature)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_token_feature>())).min_len as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_token_feature),
      "::",
      stringify!(min_len)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_token_feature>())).max_len as *const _ as usize
    },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_token_feature),
      "::",
      stringify!(max_len)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_wowlan_tcp_data_token_feature>())).bufsize as *const _ as usize
    },
    8usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_wowlan_tcp_data_token_feature),
      "::",
      stringify!(bufsize)
    )
  );
}
pub const nl80211_wowlan_tcp_attrs___NL80211_WOWLAN_TCP_INVALID: nl80211_wowlan_tcp_attrs = 0;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_SRC_IPV4: nl80211_wowlan_tcp_attrs = 1;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DST_IPV4: nl80211_wowlan_tcp_attrs = 2;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DST_MAC: nl80211_wowlan_tcp_attrs = 3;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_SRC_PORT: nl80211_wowlan_tcp_attrs = 4;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DST_PORT: nl80211_wowlan_tcp_attrs = 5;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DATA_PAYLOAD: nl80211_wowlan_tcp_attrs = 6;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DATA_PAYLOAD_SEQ: nl80211_wowlan_tcp_attrs =
  7;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DATA_PAYLOAD_TOKEN: nl80211_wowlan_tcp_attrs =
  8;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_DATA_INTERVAL: nl80211_wowlan_tcp_attrs = 9;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_WAKE_PAYLOAD: nl80211_wowlan_tcp_attrs = 10;
pub const nl80211_wowlan_tcp_attrs_NL80211_WOWLAN_TCP_WAKE_MASK: nl80211_wowlan_tcp_attrs = 11;
pub const nl80211_wowlan_tcp_attrs_NUM_NL80211_WOWLAN_TCP: nl80211_wowlan_tcp_attrs = 12;
pub const nl80211_wowlan_tcp_attrs_MAX_NL80211_WOWLAN_TCP: nl80211_wowlan_tcp_attrs = 11;
pub type nl80211_wowlan_tcp_attrs = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_coalesce_rule_support {
  pub max_rules: __u32,
  pub pat: nl80211_pattern_support,
  pub max_delay: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_coalesce_rule_support() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_coalesce_rule_support>(),
    24usize,
    concat!("Size of: ", stringify!(nl80211_coalesce_rule_support))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_coalesce_rule_support>(),
    1usize,
    concat!("Alignment of ", stringify!(nl80211_coalesce_rule_support))
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_coalesce_rule_support>())).max_rules as *const _ as usize
    },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_coalesce_rule_support),
      "::",
      stringify!(max_rules)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_coalesce_rule_support>())).pat as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_coalesce_rule_support),
      "::",
      stringify!(pat)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_coalesce_rule_support>())).max_delay as *const _ as usize
    },
    20usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_coalesce_rule_support),
      "::",
      stringify!(max_delay)
    )
  );
}
pub const nl80211_attr_coalesce_rule___NL80211_COALESCE_RULE_INVALID: nl80211_attr_coalesce_rule =
  0;
pub const nl80211_attr_coalesce_rule_NL80211_ATTR_COALESCE_RULE_DELAY: nl80211_attr_coalesce_rule =
  1;
pub const nl80211_attr_coalesce_rule_NL80211_ATTR_COALESCE_RULE_CONDITION:
  nl80211_attr_coalesce_rule = 2;
pub const nl80211_attr_coalesce_rule_NL80211_ATTR_COALESCE_RULE_PKT_PATTERN:
  nl80211_attr_coalesce_rule = 3;
pub const nl80211_attr_coalesce_rule_NUM_NL80211_ATTR_COALESCE_RULE: nl80211_attr_coalesce_rule = 4;
pub const nl80211_attr_coalesce_rule_NL80211_ATTR_COALESCE_RULE_MAX: nl80211_attr_coalesce_rule = 3;
pub type nl80211_attr_coalesce_rule = u32;
pub const nl80211_coalesce_condition_NL80211_COALESCE_CONDITION_MATCH: nl80211_coalesce_condition =
  0;
pub const nl80211_coalesce_condition_NL80211_COALESCE_CONDITION_NO_MATCH:
  nl80211_coalesce_condition = 1;
pub type nl80211_coalesce_condition = u32;
pub const nl80211_iface_limit_attrs_NL80211_IFACE_LIMIT_UNSPEC: nl80211_iface_limit_attrs = 0;
pub const nl80211_iface_limit_attrs_NL80211_IFACE_LIMIT_MAX: nl80211_iface_limit_attrs = 1;
pub const nl80211_iface_limit_attrs_NL80211_IFACE_LIMIT_TYPES: nl80211_iface_limit_attrs = 2;
pub const nl80211_iface_limit_attrs_NUM_NL80211_IFACE_LIMIT: nl80211_iface_limit_attrs = 3;
pub const nl80211_iface_limit_attrs_MAX_NL80211_IFACE_LIMIT: nl80211_iface_limit_attrs = 2;
pub type nl80211_iface_limit_attrs = u32;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_UNSPEC: nl80211_if_combination_attrs = 0;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_LIMITS: nl80211_if_combination_attrs = 1;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_MAXNUM: nl80211_if_combination_attrs = 2;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_STA_AP_BI_MATCH:
  nl80211_if_combination_attrs = 3;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_NUM_CHANNELS:
  nl80211_if_combination_attrs = 4;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_RADAR_DETECT_WIDTHS:
  nl80211_if_combination_attrs = 5;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_RADAR_DETECT_REGIONS:
  nl80211_if_combination_attrs = 6;
pub const nl80211_if_combination_attrs_NL80211_IFACE_COMB_BI_MIN_GCD: nl80211_if_combination_attrs =
  7;
pub const nl80211_if_combination_attrs_NUM_NL80211_IFACE_COMB: nl80211_if_combination_attrs = 8;
pub const nl80211_if_combination_attrs_MAX_NL80211_IFACE_COMB: nl80211_if_combination_attrs = 7;
pub type nl80211_if_combination_attrs = u32;
pub const nl80211_plink_state_NL80211_PLINK_LISTEN: nl80211_plink_state = 0;
pub const nl80211_plink_state_NL80211_PLINK_OPN_SNT: nl80211_plink_state = 1;
pub const nl80211_plink_state_NL80211_PLINK_OPN_RCVD: nl80211_plink_state = 2;
pub const nl80211_plink_state_NL80211_PLINK_CNF_RCVD: nl80211_plink_state = 3;
pub const nl80211_plink_state_NL80211_PLINK_ESTAB: nl80211_plink_state = 4;
pub const nl80211_plink_state_NL80211_PLINK_HOLDING: nl80211_plink_state = 5;
pub const nl80211_plink_state_NL80211_PLINK_BLOCKED: nl80211_plink_state = 6;
pub const nl80211_plink_state_NUM_NL80211_PLINK_STATES: nl80211_plink_state = 7;
pub const nl80211_plink_state_MAX_NL80211_PLINK_STATES: nl80211_plink_state = 6;
pub type nl80211_plink_state = u32;
pub const nl80211_rekey_data___NL80211_REKEY_DATA_INVALID: nl80211_rekey_data = 0;
pub const nl80211_rekey_data_NL80211_REKEY_DATA_KEK: nl80211_rekey_data = 1;
pub const nl80211_rekey_data_NL80211_REKEY_DATA_KCK: nl80211_rekey_data = 2;
pub const nl80211_rekey_data_NL80211_REKEY_DATA_REPLAY_CTR: nl80211_rekey_data = 3;
pub const nl80211_rekey_data_NUM_NL80211_REKEY_DATA: nl80211_rekey_data = 4;
pub const nl80211_rekey_data_MAX_NL80211_REKEY_DATA: nl80211_rekey_data = 3;
pub type nl80211_rekey_data = u32;
pub const nl80211_hidden_ssid_NL80211_HIDDEN_SSID_NOT_IN_USE: nl80211_hidden_ssid = 0;
pub const nl80211_hidden_ssid_NL80211_HIDDEN_SSID_ZERO_LEN: nl80211_hidden_ssid = 1;
pub const nl80211_hidden_ssid_NL80211_HIDDEN_SSID_ZERO_CONTENTS: nl80211_hidden_ssid = 2;
pub type nl80211_hidden_ssid = u32;
pub const nl80211_sta_wme_attr___NL80211_STA_WME_INVALID: nl80211_sta_wme_attr = 0;
pub const nl80211_sta_wme_attr_NL80211_STA_WME_UAPSD_QUEUES: nl80211_sta_wme_attr = 1;
pub const nl80211_sta_wme_attr_NL80211_STA_WME_MAX_SP: nl80211_sta_wme_attr = 2;
pub const nl80211_sta_wme_attr___NL80211_STA_WME_AFTER_LAST: nl80211_sta_wme_attr = 3;
pub const nl80211_sta_wme_attr_NL80211_STA_WME_MAX: nl80211_sta_wme_attr = 2;
pub type nl80211_sta_wme_attr = u32;
pub const nl80211_pmksa_candidate_attr___NL80211_PMKSA_CANDIDATE_INVALID:
  nl80211_pmksa_candidate_attr = 0;
pub const nl80211_pmksa_candidate_attr_NL80211_PMKSA_CANDIDATE_INDEX: nl80211_pmksa_candidate_attr =
  1;
pub const nl80211_pmksa_candidate_attr_NL80211_PMKSA_CANDIDATE_BSSID: nl80211_pmksa_candidate_attr =
  2;
pub const nl80211_pmksa_candidate_attr_NL80211_PMKSA_CANDIDATE_PREAUTH:
  nl80211_pmksa_candidate_attr = 3;
pub const nl80211_pmksa_candidate_attr_NUM_NL80211_PMKSA_CANDIDATE: nl80211_pmksa_candidate_attr =
  4;
pub const nl80211_pmksa_candidate_attr_MAX_NL80211_PMKSA_CANDIDATE: nl80211_pmksa_candidate_attr =
  3;
pub type nl80211_pmksa_candidate_attr = u32;
pub const nl80211_tdls_operation_NL80211_TDLS_DISCOVERY_REQ: nl80211_tdls_operation = 0;
pub const nl80211_tdls_operation_NL80211_TDLS_SETUP: nl80211_tdls_operation = 1;
pub const nl80211_tdls_operation_NL80211_TDLS_TEARDOWN: nl80211_tdls_operation = 2;
pub const nl80211_tdls_operation_NL80211_TDLS_ENABLE_LINK: nl80211_tdls_operation = 3;
pub const nl80211_tdls_operation_NL80211_TDLS_DISABLE_LINK: nl80211_tdls_operation = 4;
pub type nl80211_tdls_operation = u32;
pub const nl80211_feature_flags_NL80211_FEATURE_SK_TX_STATUS: nl80211_feature_flags = 1;
pub const nl80211_feature_flags_NL80211_FEATURE_HT_IBSS: nl80211_feature_flags = 2;
pub const nl80211_feature_flags_NL80211_FEATURE_INACTIVITY_TIMER: nl80211_feature_flags = 4;
pub const nl80211_feature_flags_NL80211_FEATURE_CELL_BASE_REG_HINTS: nl80211_feature_flags = 8;
pub const nl80211_feature_flags_NL80211_FEATURE_P2P_DEVICE_NEEDS_CHANNEL: nl80211_feature_flags =
  16;
pub const nl80211_feature_flags_NL80211_FEATURE_SAE: nl80211_feature_flags = 32;
pub const nl80211_feature_flags_NL80211_FEATURE_LOW_PRIORITY_SCAN: nl80211_feature_flags = 64;
pub const nl80211_feature_flags_NL80211_FEATURE_SCAN_FLUSH: nl80211_feature_flags = 128;
pub const nl80211_feature_flags_NL80211_FEATURE_AP_SCAN: nl80211_feature_flags = 256;
pub const nl80211_feature_flags_NL80211_FEATURE_VIF_TXPOWER: nl80211_feature_flags = 512;
pub const nl80211_feature_flags_NL80211_FEATURE_NEED_OBSS_SCAN: nl80211_feature_flags = 1024;
pub const nl80211_feature_flags_NL80211_FEATURE_P2P_GO_CTWIN: nl80211_feature_flags = 2048;
pub const nl80211_feature_flags_NL80211_FEATURE_P2P_GO_OPPPS: nl80211_feature_flags = 4096;
pub const nl80211_feature_flags_NL80211_FEATURE_ADVERTISE_CHAN_LIMITS: nl80211_feature_flags =
  16384;
pub const nl80211_feature_flags_NL80211_FEATURE_FULL_AP_CLIENT_STATE: nl80211_feature_flags = 32768;
pub const nl80211_feature_flags_NL80211_FEATURE_USERSPACE_MPM: nl80211_feature_flags = 65536;
pub const nl80211_feature_flags_NL80211_FEATURE_ACTIVE_MONITOR: nl80211_feature_flags = 131072;
pub const nl80211_feature_flags_NL80211_FEATURE_AP_MODE_CHAN_WIDTH_CHANGE: nl80211_feature_flags =
  262144;
pub const nl80211_feature_flags_NL80211_FEATURE_DS_PARAM_SET_IE_IN_PROBES: nl80211_feature_flags =
  524288;
pub const nl80211_feature_flags_NL80211_FEATURE_WFA_TPC_IE_IN_PROBES: nl80211_feature_flags =
  1048576;
pub const nl80211_feature_flags_NL80211_FEATURE_QUIET: nl80211_feature_flags = 2097152;
pub const nl80211_feature_flags_NL80211_FEATURE_TX_POWER_INSERTION: nl80211_feature_flags = 4194304;
pub const nl80211_feature_flags_NL80211_FEATURE_ACKTO_ESTIMATION: nl80211_feature_flags = 8388608;
pub const nl80211_feature_flags_NL80211_FEATURE_STATIC_SMPS: nl80211_feature_flags = 16777216;
pub const nl80211_feature_flags_NL80211_FEATURE_DYNAMIC_SMPS: nl80211_feature_flags = 33554432;
pub const nl80211_feature_flags_NL80211_FEATURE_SUPPORTS_WMM_ADMISSION: nl80211_feature_flags =
  67108864;
pub const nl80211_feature_flags_NL80211_FEATURE_MAC_ON_CREATE: nl80211_feature_flags = 134217728;
pub const nl80211_feature_flags_NL80211_FEATURE_TDLS_CHANNEL_SWITCH: nl80211_feature_flags =
  268435456;
pub const nl80211_feature_flags_NL80211_FEATURE_SCAN_RANDOM_MAC_ADDR: nl80211_feature_flags =
  536870912;
pub const nl80211_feature_flags_NL80211_FEATURE_SCHED_SCAN_RANDOM_MAC_ADDR: nl80211_feature_flags =
  1073741824;
pub const nl80211_feature_flags_NL80211_FEATURE_ND_RANDOM_MAC_ADDR: nl80211_feature_flags =
  -2147483648;
pub type nl80211_feature_flags = i32;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_VHT_IBSS: nl80211_ext_feature_index = 0;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_RRM: nl80211_ext_feature_index = 1;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_MU_MIMO_AIR_SNIFFER:
  nl80211_ext_feature_index = 2;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_SCAN_START_TIME: nl80211_ext_feature_index =
  3;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_BSS_PARENT_TSF: nl80211_ext_feature_index =
  4;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_SET_SCAN_DWELL: nl80211_ext_feature_index =
  5;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_BEACON_RATE_LEGACY:
  nl80211_ext_feature_index = 6;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_BEACON_RATE_HT: nl80211_ext_feature_index =
  7;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_BEACON_RATE_VHT: nl80211_ext_feature_index =
  8;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_FILS_STA: nl80211_ext_feature_index = 9;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA:
  nl80211_ext_feature_index = 10;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_MGMT_TX_RANDOM_TA_CONNECTED:
  nl80211_ext_feature_index = 11;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_SCHED_SCAN_RELATIVE_RSSI:
  nl80211_ext_feature_index = 12;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_CQM_RSSI_LIST: nl80211_ext_feature_index =
  13;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_FILS_SK_OFFLOAD: nl80211_ext_feature_index =
  14;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_PSK:
  nl80211_ext_feature_index = 15;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_4WAY_HANDSHAKE_STA_1X:
  nl80211_ext_feature_index = 16;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_FILS_MAX_CHANNEL_TIME:
  nl80211_ext_feature_index = 17;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_ACCEPT_BCAST_PROBE_RESP:
  nl80211_ext_feature_index = 18;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_OCE_PROBE_REQ_HIGH_TX_RATE:
  nl80211_ext_feature_index = 19;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION:
  nl80211_ext_feature_index = 20;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_MFP_OPTIONAL: nl80211_ext_feature_index =
  21;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_LOW_SPAN_SCAN: nl80211_ext_feature_index =
  22;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_LOW_POWER_SCAN: nl80211_ext_feature_index =
  23;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN:
  nl80211_ext_feature_index = 24;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_DFS_OFFLOAD: nl80211_ext_feature_index = 25;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211:
  nl80211_ext_feature_index = 26;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT:
  nl80211_ext_feature_index = 27;
pub const nl80211_ext_feature_index_NL80211_EXT_FEATURE_TXQS: nl80211_ext_feature_index = 28;
pub const nl80211_ext_feature_index_NUM_NL80211_EXT_FEATURES: nl80211_ext_feature_index = 29;
pub const nl80211_ext_feature_index_MAX_NL80211_EXT_FEATURES: nl80211_ext_feature_index = 28;
pub type nl80211_ext_feature_index = u32;
pub const nl80211_probe_resp_offload_support_attr_NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS:
  nl80211_probe_resp_offload_support_attr = 1;
pub const nl80211_probe_resp_offload_support_attr_NL80211_PROBE_RESP_OFFLOAD_SUPPORT_WPS2:
  nl80211_probe_resp_offload_support_attr = 2;
pub const nl80211_probe_resp_offload_support_attr_NL80211_PROBE_RESP_OFFLOAD_SUPPORT_P2P:
  nl80211_probe_resp_offload_support_attr = 4;
pub const nl80211_probe_resp_offload_support_attr_NL80211_PROBE_RESP_OFFLOAD_SUPPORT_80211U:
  nl80211_probe_resp_offload_support_attr = 8;
pub type nl80211_probe_resp_offload_support_attr = u32;
pub const nl80211_connect_failed_reason_NL80211_CONN_FAIL_MAX_CLIENTS:
  nl80211_connect_failed_reason = 0;
pub const nl80211_connect_failed_reason_NL80211_CONN_FAIL_BLOCKED_CLIENT:
  nl80211_connect_failed_reason = 1;
pub type nl80211_connect_failed_reason = u32;
pub const nl80211_timeout_reason_NL80211_TIMEOUT_UNSPECIFIED: nl80211_timeout_reason = 0;
pub const nl80211_timeout_reason_NL80211_TIMEOUT_SCAN: nl80211_timeout_reason = 1;
pub const nl80211_timeout_reason_NL80211_TIMEOUT_AUTH: nl80211_timeout_reason = 2;
pub const nl80211_timeout_reason_NL80211_TIMEOUT_ASSOC: nl80211_timeout_reason = 3;
pub type nl80211_timeout_reason = u32;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_LOW_PRIORITY: nl80211_scan_flags = 1;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_FLUSH: nl80211_scan_flags = 2;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_AP: nl80211_scan_flags = 4;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_RANDOM_ADDR: nl80211_scan_flags = 8;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_FILS_MAX_CHANNEL_TIME: nl80211_scan_flags = 16;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_ACCEPT_BCAST_PROBE_RESP: nl80211_scan_flags = 32;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_OCE_PROBE_REQ_HIGH_TX_RATE: nl80211_scan_flags = 64;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_OCE_PROBE_REQ_DEFERRAL_SUPPRESSION:
  nl80211_scan_flags = 128;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_LOW_SPAN: nl80211_scan_flags = 256;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_LOW_POWER: nl80211_scan_flags = 512;
pub const nl80211_scan_flags_NL80211_SCAN_FLAG_HIGH_ACCURACY: nl80211_scan_flags = 1024;
pub type nl80211_scan_flags = u32;
pub const nl80211_acl_policy_NL80211_ACL_POLICY_ACCEPT_UNLESS_LISTED: nl80211_acl_policy = 0;
pub const nl80211_acl_policy_NL80211_ACL_POLICY_DENY_UNLESS_LISTED: nl80211_acl_policy = 1;
pub type nl80211_acl_policy = u32;
pub const nl80211_smps_mode_NL80211_SMPS_OFF: nl80211_smps_mode = 0;
pub const nl80211_smps_mode_NL80211_SMPS_STATIC: nl80211_smps_mode = 1;
pub const nl80211_smps_mode_NL80211_SMPS_DYNAMIC: nl80211_smps_mode = 2;
pub const nl80211_smps_mode___NL80211_SMPS_AFTER_LAST: nl80211_smps_mode = 3;
pub const nl80211_smps_mode_NL80211_SMPS_MAX: nl80211_smps_mode = 2;
pub type nl80211_smps_mode = u32;
pub const nl80211_radar_event_NL80211_RADAR_DETECTED: nl80211_radar_event = 0;
pub const nl80211_radar_event_NL80211_RADAR_CAC_FINISHED: nl80211_radar_event = 1;
pub const nl80211_radar_event_NL80211_RADAR_CAC_ABORTED: nl80211_radar_event = 2;
pub const nl80211_radar_event_NL80211_RADAR_NOP_FINISHED: nl80211_radar_event = 3;
pub const nl80211_radar_event_NL80211_RADAR_PRE_CAC_EXPIRED: nl80211_radar_event = 4;
pub const nl80211_radar_event_NL80211_RADAR_CAC_STARTED: nl80211_radar_event = 5;
pub type nl80211_radar_event = u32;
pub const nl80211_dfs_state_NL80211_DFS_USABLE: nl80211_dfs_state = 0;
pub const nl80211_dfs_state_NL80211_DFS_UNAVAILABLE: nl80211_dfs_state = 1;
pub const nl80211_dfs_state_NL80211_DFS_AVAILABLE: nl80211_dfs_state = 2;
pub type nl80211_dfs_state = u32;
pub const nl80211_protocol_features_NL80211_PROTOCOL_FEATURE_SPLIT_WIPHY_DUMP:
  nl80211_protocol_features = 1;
pub type nl80211_protocol_features = u32;
pub const nl80211_crit_proto_id_NL80211_CRIT_PROTO_UNSPEC: nl80211_crit_proto_id = 0;
pub const nl80211_crit_proto_id_NL80211_CRIT_PROTO_DHCP: nl80211_crit_proto_id = 1;
pub const nl80211_crit_proto_id_NL80211_CRIT_PROTO_EAPOL: nl80211_crit_proto_id = 2;
pub const nl80211_crit_proto_id_NL80211_CRIT_PROTO_APIPA: nl80211_crit_proto_id = 3;
pub const nl80211_crit_proto_id_NUM_NL80211_CRIT_PROTO: nl80211_crit_proto_id = 4;
pub type nl80211_crit_proto_id = u32;
pub const nl80211_rxmgmt_flags_NL80211_RXMGMT_FLAG_ANSWERED: nl80211_rxmgmt_flags = 1;
pub type nl80211_rxmgmt_flags = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_vendor_cmd_info {
  pub vendor_id: __u32,
  pub subcmd: __u32,
}
#[test]
fn bindgen_test_layout_nl80211_vendor_cmd_info() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_vendor_cmd_info>(),
    8usize,
    concat!("Size of: ", stringify!(nl80211_vendor_cmd_info))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_vendor_cmd_info>(),
    4usize,
    concat!("Alignment of ", stringify!(nl80211_vendor_cmd_info))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_vendor_cmd_info>())).vendor_id as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_vendor_cmd_info),
      "::",
      stringify!(vendor_id)
    )
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_vendor_cmd_info>())).subcmd as *const _ as usize },
    4usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_vendor_cmd_info),
      "::",
      stringify!(subcmd)
    )
  );
}
pub const nl80211_tdls_peer_capability_NL80211_TDLS_PEER_HT: nl80211_tdls_peer_capability = 1;
pub const nl80211_tdls_peer_capability_NL80211_TDLS_PEER_VHT: nl80211_tdls_peer_capability = 2;
pub const nl80211_tdls_peer_capability_NL80211_TDLS_PEER_WMM: nl80211_tdls_peer_capability = 4;
pub type nl80211_tdls_peer_capability = u32;
pub const nl80211_sched_scan_plan___NL80211_SCHED_SCAN_PLAN_INVALID: nl80211_sched_scan_plan = 0;
pub const nl80211_sched_scan_plan_NL80211_SCHED_SCAN_PLAN_INTERVAL: nl80211_sched_scan_plan = 1;
pub const nl80211_sched_scan_plan_NL80211_SCHED_SCAN_PLAN_ITERATIONS: nl80211_sched_scan_plan = 2;
pub const nl80211_sched_scan_plan___NL80211_SCHED_SCAN_PLAN_AFTER_LAST: nl80211_sched_scan_plan = 3;
pub const nl80211_sched_scan_plan_NL80211_SCHED_SCAN_PLAN_MAX: nl80211_sched_scan_plan = 2;
pub type nl80211_sched_scan_plan = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct nl80211_bss_select_rssi_adjust {
  pub band: __u8,
  pub delta: __s8,
}
#[test]
fn bindgen_test_layout_nl80211_bss_select_rssi_adjust() {
  assert_eq!(
    ::std::mem::size_of::<nl80211_bss_select_rssi_adjust>(),
    2usize,
    concat!("Size of: ", stringify!(nl80211_bss_select_rssi_adjust))
  );
  assert_eq!(
    ::std::mem::align_of::<nl80211_bss_select_rssi_adjust>(),
    1usize,
    concat!("Alignment of ", stringify!(nl80211_bss_select_rssi_adjust))
  );
  assert_eq!(
    unsafe { &(*(::std::ptr::null::<nl80211_bss_select_rssi_adjust>())).band as *const _ as usize },
    0usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_bss_select_rssi_adjust),
      "::",
      stringify!(band)
    )
  );
  assert_eq!(
    unsafe {
      &(*(::std::ptr::null::<nl80211_bss_select_rssi_adjust>())).delta as *const _ as usize
    },
    1usize,
    concat!(
      "Offset of field: ",
      stringify!(nl80211_bss_select_rssi_adjust),
      "::",
      stringify!(delta)
    )
  );
}
pub const nl80211_bss_select_attr___NL80211_BSS_SELECT_ATTR_INVALID: nl80211_bss_select_attr = 0;
pub const nl80211_bss_select_attr_NL80211_BSS_SELECT_ATTR_RSSI: nl80211_bss_select_attr = 1;
pub const nl80211_bss_select_attr_NL80211_BSS_SELECT_ATTR_BAND_PREF: nl80211_bss_select_attr = 2;
pub const nl80211_bss_select_attr_NL80211_BSS_SELECT_ATTR_RSSI_ADJUST: nl80211_bss_select_attr = 3;
pub const nl80211_bss_select_attr___NL80211_BSS_SELECT_ATTR_AFTER_LAST: nl80211_bss_select_attr = 4;
pub const nl80211_bss_select_attr_NL80211_BSS_SELECT_ATTR_MAX: nl80211_bss_select_attr = 3;
pub type nl80211_bss_select_attr = u32;
pub const nl80211_nan_function_type_NL80211_NAN_FUNC_PUBLISH: nl80211_nan_function_type = 0;
pub const nl80211_nan_function_type_NL80211_NAN_FUNC_SUBSCRIBE: nl80211_nan_function_type = 1;
pub const nl80211_nan_function_type_NL80211_NAN_FUNC_FOLLOW_UP: nl80211_nan_function_type = 2;
pub const nl80211_nan_function_type___NL80211_NAN_FUNC_TYPE_AFTER_LAST: nl80211_nan_function_type =
  3;
pub const nl80211_nan_function_type_NL80211_NAN_FUNC_MAX_TYPE: nl80211_nan_function_type = 2;
pub type nl80211_nan_function_type = u32;
pub const nl80211_nan_publish_type_NL80211_NAN_SOLICITED_PUBLISH: nl80211_nan_publish_type = 1;
pub const nl80211_nan_publish_type_NL80211_NAN_UNSOLICITED_PUBLISH: nl80211_nan_publish_type = 2;
pub type nl80211_nan_publish_type = u32;
pub const nl80211_nan_func_term_reason_NL80211_NAN_FUNC_TERM_REASON_USER_REQUEST:
  nl80211_nan_func_term_reason = 0;
pub const nl80211_nan_func_term_reason_NL80211_NAN_FUNC_TERM_REASON_TTL_EXPIRED:
  nl80211_nan_func_term_reason = 1;
pub const nl80211_nan_func_term_reason_NL80211_NAN_FUNC_TERM_REASON_ERROR:
  nl80211_nan_func_term_reason = 2;
pub type nl80211_nan_func_term_reason = u32;
pub const nl80211_nan_func_attributes___NL80211_NAN_FUNC_INVALID: nl80211_nan_func_attributes = 0;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_TYPE: nl80211_nan_func_attributes = 1;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_SERVICE_ID: nl80211_nan_func_attributes = 2;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_PUBLISH_TYPE: nl80211_nan_func_attributes =
  3;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_PUBLISH_BCAST: nl80211_nan_func_attributes =
  4;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_SUBSCRIBE_ACTIVE:
  nl80211_nan_func_attributes = 5;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_FOLLOW_UP_ID: nl80211_nan_func_attributes =
  6;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_FOLLOW_UP_REQ_ID:
  nl80211_nan_func_attributes = 7;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_FOLLOW_UP_DEST: nl80211_nan_func_attributes =
  8;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_CLOSE_RANGE: nl80211_nan_func_attributes = 9;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_TTL: nl80211_nan_func_attributes = 10;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_SERVICE_INFO: nl80211_nan_func_attributes =
  11;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_SRF: nl80211_nan_func_attributes = 12;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_RX_MATCH_FILTER:
  nl80211_nan_func_attributes = 13;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_TX_MATCH_FILTER:
  nl80211_nan_func_attributes = 14;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_INSTANCE_ID: nl80211_nan_func_attributes =
  15;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_TERM_REASON: nl80211_nan_func_attributes =
  16;
pub const nl80211_nan_func_attributes_NUM_NL80211_NAN_FUNC_ATTR: nl80211_nan_func_attributes = 17;
pub const nl80211_nan_func_attributes_NL80211_NAN_FUNC_ATTR_MAX: nl80211_nan_func_attributes = 16;
pub type nl80211_nan_func_attributes = u32;
pub const nl80211_nan_srf_attributes___NL80211_NAN_SRF_INVALID: nl80211_nan_srf_attributes = 0;
pub const nl80211_nan_srf_attributes_NL80211_NAN_SRF_INCLUDE: nl80211_nan_srf_attributes = 1;
pub const nl80211_nan_srf_attributes_NL80211_NAN_SRF_BF: nl80211_nan_srf_attributes = 2;
pub const nl80211_nan_srf_attributes_NL80211_NAN_SRF_BF_IDX: nl80211_nan_srf_attributes = 3;
pub const nl80211_nan_srf_attributes_NL80211_NAN_SRF_MAC_ADDRS: nl80211_nan_srf_attributes = 4;
pub const nl80211_nan_srf_attributes_NUM_NL80211_NAN_SRF_ATTR: nl80211_nan_srf_attributes = 5;
pub const nl80211_nan_srf_attributes_NL80211_NAN_SRF_ATTR_MAX: nl80211_nan_srf_attributes = 4;
pub type nl80211_nan_srf_attributes = u32;
pub const nl80211_nan_match_attributes___NL80211_NAN_MATCH_INVALID: nl80211_nan_match_attributes =
  0;
pub const nl80211_nan_match_attributes_NL80211_NAN_MATCH_FUNC_LOCAL: nl80211_nan_match_attributes =
  1;
pub const nl80211_nan_match_attributes_NL80211_NAN_MATCH_FUNC_PEER: nl80211_nan_match_attributes =
  2;
pub const nl80211_nan_match_attributes_NUM_NL80211_NAN_MATCH_ATTR: nl80211_nan_match_attributes = 3;
pub const nl80211_nan_match_attributes_NL80211_NAN_MATCH_ATTR_MAX: nl80211_nan_match_attributes = 2;
pub type nl80211_nan_match_attributes = u32;
pub const nl80211_external_auth_action_NL80211_EXTERNAL_AUTH_START: nl80211_external_auth_action =
  0;
pub const nl80211_external_auth_action_NL80211_EXTERNAL_AUTH_ABORT: nl80211_external_auth_action =
  1;
pub type nl80211_external_auth_action = u32;
